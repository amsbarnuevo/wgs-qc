









### GRAPHS

\fontsize{7}{8}
\selectfont
\captionsetup[table]{labelformat=empty}
\renewcommand{\arraystretch}{1.2}

```{r pie_chart, echo=FALSE, message=FALSE, warning=FALSE}
# Calculate the counts for each "wgs_id"
wgs_id_count <- table(wgs_df$wgs_id)

# Create a data frame with "wgs_id" and their counts
wgs_count_df <- data.frame(wgs_id = names(wgs_id_count), Frequency = as.vector(wgs_id_count))

# Sort the data frame by the "Frequency" column in descending order
wgs_count_df <- wgs_count_df[order(-wgs_count_df$Frequency),]

# Now, set the factor levels in reverse order for correct sorting
wgs_count_df$wgs_id <- factor(wgs_count_df$wgs_id, levels = rev(wgs_count_df$wgs_id))


ggplot(data = wgs_count_df, aes(x = " ", y = Frequency, fill = wgs_id)) +
  geom_col(color = "black") +
  theme(legend.text = element_text(size=5)) +
  geom_text(aes(label = Frequency),
            position = position_stack(vjust = 0.5)) +
  xlab("") +
  labs(fill="WGS ID") +
  coord_polar(theta = "y") +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        panel.grid  = element_blank())

```

### Result Classification

```{r organism results, echo=FALSE, message=FALSE, warning=FALSE}
# Define the desired order for the 'result' levels
desired_order <- c("PASS", "WARNING", "FAILURE")
wgs_df$result <- factor(wgs_df$result, levels = desired_order)

result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")

ggplot(data = wgs_df, aes(x = ORG, fill = result)) +
  geom_bar() +
  facet_wrap(~ result) +
  coord_flip() +
  scale_fill_manual(values = result_colors) + # Apply the defined colors
  ylab("Frequency") +
  xlab("Organisms") +
  guides(fill = FALSE) +  # Hide the legend for the 'result' variable
  scale_y_continuous(breaks= pretty_breaks())
  #theme_minimal()
```

### Number of contigs

```{r ,echo=FALSE, message=FALSE, warning=FALSE}

ggplot(data = wgs_df) +
  geom_point(mapping = aes(x = no_of_contigs_value, y = ORG, color = ifelse(no_of_contigs_value < 301, "#8ad879", "#f3533a"))) +
  ylab("Organisms") +
  xlab("Number of Contigs") +
  scale_color_manual(values = c("#8ad879", "#f3533a"), labels = c("Passed", "Above threshold")) +
  labs(color = "Contigs")
  #theme_minimal()
```

### N50 Value

```{r n50_result ,echo=FALSE, message=FALSE, warning=FALSE}
n50_result_count <- wgs_df %>% 
  count(n50_result)



result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")

ggplot(data = wgs_df) +
  geom_point(mapping = aes(x = n50_value, y = ORG, color = ifelse(n50_result == "PASS", "#8ad879", ifelse(n50_result == "WARNING", "#fa9f42", "#f3533a")))) +
  scale_color_manual(values = c("#8ad879", "#fa9f42","#f3533a"), labels = c("Passed", "Warning", "Failed")) +
  labs(color = "N50 Result") +
  xlab("N50 Value") +
  ylab("Organisms") +
  scale_x_continuous(
  labels = scales::comma_format(big.mark = ',',
                                 decimal.mark = '.'))


```

### Total Length

```{r length_result ,echo=FALSE, message=FALSE, warning=FALSE}
length_result_count <- wgs_df %>% 
  count(total_length_result)



result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")

ggplot(data = wgs_df) +
  geom_point(mapping = aes(x = total_length_value, y = ORG, color = ifelse(total_length_result == "PASS", "#8ad879", ifelse(total_length_result == "WARNING", "#fa9f42", "#f3533a")))) +
  scale_color_manual(values = c("#8ad879", "#fa9f42","#f3533a"), labels = c("Passed", "Warning", "Failed")) +
  labs(color = "Total length result") +
  xlab("Total length Value") +
  ylab("Organisms") +
  scale_x_continuous(
  labels = scales::comma_format(big.mark = ',',
                                 decimal.mark = '.'))


```

$\\$ $\\$ $\\$ $\color{red}{\normalsize\textbf{RECOMMENDATION:}}$

```{r recommendation table ,echo=FALSE, message=FALSE, warning=FALSE}
if ((nrow(wgs_lowreads) != 0 ) | (qc_failed_count != 0)){
  sample_id <- c('24ARS_GMH0247')
  action <- c("For repeat testing")
  reason <- c('Low read count')
  reco_table <- data.frame(sample_id,action, reason)
  
  colnames(reco_table) <- c('Sample ID','Action','Reason')

  reco_table %>% 
    kable(booktabs = T, align = "c")%>%
    kable_styling(position = "left") %>%
    column_spec(1, width = "6cm") %>%
    column_spec(2, width = "4cm") %>%
    column_spec(3, width = "6cm") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE)
  
}else{
  sample_id <- c("")
  action <- c("")
  reason <- c("")
  reco_table <- data.frame(sample_id,action, reason)
  
  colnames(reco_table) <- c('Sample ID','Action','Reason')
  
  reco_table %>% 
    kable(booktabs = T, align = "c")%>%
    kable_styling(position = "left") %>%
    column_spec(1, width = "6cm") %>%
    column_spec(2, width = "4cm") %>%
    column_spec(3, width = "6cm") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE)
}

```

### MLST RESULTS

```{r mlst_df ,echo=FALSE, message=FALSE, warning=FALSE}
#Remain Data column
mlst_df_clean <- mlst_df %>%
  rename("sample_id" = 1,
         "species" = 2,
         "MLST" = 3)

#drop row without species
mlst_df_clean <- subset(mlst_df_clean, mlst_df_clean$species != '-')

#extract text before the first period in sample_id column
mlst_df_clean$sample_id <- sub("\\..*", "", mlst_df_clean$sample_id)

#change "-" to "_" in sample_id column
mlst_df_clean$sample_id <- gsub("-", "_", mlst_df_clean$sample_id, fixed=TRUE)

#merge wgs_id from wgs_df to mlst_df to set as species value
wgs_species <- subset(wgs_df, , select = c("sample_id", "wgs_id"))
mlst_df_clean <- merge(mlst_df_clean,wgs_species,by = "sample_id")

#reorder column
mlst_df_clean <- mlst_df_clean %>% 
  relocate(wgs_id, .after = species)

#identify salmonella enterica group
mlst_df_clean$species <- ifelse(mlst_df_clean$wgs_id == 'Salmonella enterica', 'salmonella_enterica', ifelse(mlst_df_clean$wgs_id == 'Salmonella typhoidal','salmonella_typhoidal', mlst_df_clean$species))


#not identified sample
mlst_df_clean[is.na(mlst_df_clean)] <- 'Not Identified'


#list unique species in the dataframe
species_list <- unique(mlst_df_clean$species)

mlst_df_list = c()

#create multiple dataframe for each species
for(i in species_list) {
  #retain first three columns
  mlst_info_df <- subset(mlst_df_clean, select = 1:5)
  
  #remove demogs column
  mlst_result_df <- subset(mlst_df_clean, , select = -c(1, 2, 3,4,5))


  #use first row data as column names in r
  colnames(mlst_result_df)=mlst_result_df[c(1),]

  #remove special characters and number from column header
  colnames(mlst_result_df) <- gsub("\\s*\\(.*", "", colnames(mlst_result_df))


  # Apply gsub to get text inside the parenthesis
  mlst_result_df <- apply(mlst_result_df, 2, function(x) gsub("\\(([^()]*)\\)|.", "\\1", x, perl=T))

  # Convert back to data frame
  mlst_result_df <- as.data.frame(mlst_result_df)

  #combine the two dataframe
  mlst_result_df <- cbind(mlst_info_df,mlst_result_df)
  
  #assign new name to dataframe
  nam <- paste("df", i, sep = "_")
  assign(nam, mlst_result_df[mlst_result_df$species==i,])
  
  mlst_df_list <- c(mlst_df_list, nam)
}


```

```{r mlst_table ,echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
#list existing sample_id in the mlst table
not_included <- wgs_df$wgs_id[!(wgs_df$wgs_id %in% mlst_df_clean$wgs_id)]

  
for(i in mlst_df_list) {
  df <- get(i)
  
  df <- subset(df, select = -c(species) )
  names(df)[names(df) == 'wgs_id'] <- 'species'
  
  
  #kable(df,  "latex", booktabs = T, align = "c") %>%
    #kable_styling(position = "left") %>%
    #row_spec(0, background = "#D4D4D4",bold = TRUE)
  
  mlst_table <- kable(df,align = "c", row.names = FALSE) %>%
    kable_styling(latex_options = c("hold_position","scale_down"), position = "left") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE)%>%
    column_spec(1:2, width = "3cm") %>%
    column_spec(3:9, width = "1cm") %>%
    footnote(general ="(-) Not identified",
           general_title = "Legend: ", 
           footnote_as_chunk = T, title_format = c("italic"))


      
  print(mlst_table)

}

```

```{r no_mlst_table ,echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
#list existing sample_id in the mlst table
no_mlst <- wgs_df$wgs_id[!(wgs_df$wgs_id %in% mlst_df_clean$wgs_id)]

if (length(no_mlst) !=0){
  sample_id <- wgs_df$sample_id[!(wgs_df$sample_id %in% mlst_df_clean$sample_id)]
  wgs_id <- no_mlst
  species <- "No MLST result"
  
  df <- data.frame(sample_id, wgs_id, species)
  
  no_mlst_table <- kable(df,align = "c", row.names = FALSE) %>%
    kable_styling(position = "left") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE)
   


  print(no_mlst_table)
  
}



```

### MLST RESULTS SUMMARY:

```{r mlst_summary ,echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
mlst_summary <- data.frame(Species=character(), 
                 MLST=character(), 
                 stringsAsFactors=FALSE) 

for(i in mlst_df_list) {
    df <- get(i)
    
  
    #get unique species value
    species <- unique(df$wgs_id)
    
    #remove from list all value with "quasi"
    species <- species[!species %in% grep("quasi", species, value = T)]

    #Summarize and count MLST results
    mlst_count_df <- df %>% group_by(wgs_id,MLST) %>% summarise(count = sum(!is.na(MLST)))
    mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")

    #Remove empty MLST result
    #mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
    mlst_count_summary  <- subset(mlst_count_df , select = c(wgs_id, mlst_count))
    mlst_summary_df <- mlst_count_summary %>% 
      group_by(wgs_id) %>% 
      mutate(mlst_count = paste0(mlst_count, collapse = ", ")) %>%
      distinct()
    
    #assign new name to dataframe
    #nam <- paste("mlst", i, sep = "_")
    #assign(nam, mlst_summary)
    
    mlst_summary <- rbind(mlst_summary,mlst_summary_df)
    
    #add new data to exisiting dataframe
    #mlst_summary[nrow(mlst_summary) + 1,] = c(species, paste0(mlst_count_df$mlst_count, collapse=", "))
  
}


#Print table
 mlst_summary_table <- kable(mlst_summary,align = "l", row.names = FALSE) %>%
    kable_styling(position = "left") %>%
    column_spec(1, width = "6cm") %>%
    column_spec(2, width = "10cm") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
    footnote(general ="(-) Not identified",
           general_title = "Legend: ", 
           footnote_as_chunk = T, title_format = c("italic"))
      
  print(mlst_summary_table)
 
```


\newpage
\begin{landscape}
\fontsize{7}{8}
\selectfont
\captionsetup[table]{labelformat=empty}
\renewcommand{\arraystretch}{1.2}


\normalsize\textbf{AMR PREDICTION RESULTS}\textbf\normalsize

```{r amr_genes ,echo=FALSE, message=FALSE, warning=FALSE}

#Change Name to sample_id
names(AMR_df)[names(AMR_df) == 'Name'] <- 'sample_id'

#change "-" to "_" in sample_id column
AMR_df$sample_id <- gsub("-", "_", AMR_df$sample_id, fixed=TRUE)

#merge wgs_id from wgs_df to mlst_df to set as species value
AMR_df <- merge(AMR_df,wgs_species,by = "sample_id")

#remove "quasi" to wgs_id column
AMR_df$wgs_id <- gsub("quasi", "", AMR_df$wgs_id, fixed=TRUE)

amr_genes_species <- unique(AMR_df$wgs_id)

#vector to hold list of amr gene datables
amr_gene_df_list = c()


for(i in amr_genes_species) {
  df <- subset(AMR_df, AMR_df$wgs_id == i)
  sample_id <- c(df$sample_id)
  
  #create new dataframe to duplicate AMR_df
  amr_genes_df <- AMR_df
  
  amr_genes_df$Newcols <- paste(amr_genes_df$Element.type,amr_genes_df$Subclass, sep = " ")
  
  #change "/" to "/ " in sample_id column
  amr_genes_df$Newcols <- gsub("/", "/ ", amr_genes_df$Newcols, fixed=TRUE)
  
  #subset dataframe to retain needed columns only
  amr_genes_df <- subset(amr_genes_df, select = c(sample_id,Newcols,Gene.symbol))
  
  
  #convert multiple rows with same Newcols value to single row
  amr_genes_df <- amr_genes_df %>%
    group_by(Newcols, sample_id) %>%
    summarize(Concat = paste0(Gene.symbol, collapse = ", "))

  #Create new dataframe to summarize the result
  amr_genes_df <- amr_genes_df  %>%
    pivot_wider(names_from = Newcols,
                values_from = Concat)

  #assign new name to dataframe
  nam <- paste("amr", i, sep = "_")
  assign(nam, amr_genes_df[amr_genes_df$sample_id %in% sample_id, ])
  
  amr_gene_df_list <- c(amr_gene_df_list, nam)

}


```

```{r amr_genes_table ,echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
for(i in amr_gene_df_list) {
  df <- get(i)
  
  #merge wgs_id from wgs_df to amr_gene to set as species value
  df <- merge(df,wgs_species,by = "sample_id")
  
  #not identified sample
  #wgs_species$wgs_id[is.na(wgs_species$wgs_id)] <- 'Not Identified'
  
  #Change wgs_id to species
  names(df)[names(df) == 'wgs_id'] <- 'species'
  
  #reorder column
  df <- df %>%
    relocate(species, .after = sample_id)
  

  df <- df[,colSums(is.na(df))<nrow(df)]
  
  
  
  #get unique species value
  species <- unique(df$species)

  #remove from list all value with "quasi"
  #species <- species[!species %in% grep("quasi", species, value = T)]
  species_caption <- paste("\\\\textit{",species,"}", sep = "")
  species_caption <-  species_caption[1]
  
  #subset dataframe to retain needed columns only
  df <- subset(df, select = -c(species))
  
  
  if (ncol(df) > 6){
    if (ncol(df) > 12){
      col_count <- ncol(df)
      half_col <- (col_count/2) + 1
      col_split <- half_col + 1 
    
      #select specific columns in index range
      df1 <- df[ , 1:half_col]
      df2 <- df[ , col_split:col_count]
    
      df2 <-cbind(df1[,1, drop=FALSE],df2)
    
    
    
      amr_gene_table1 <- knitr::kable(df1,format='latex',booktabs = T,align = "c")%>%
      kable_styling(latex_options = c("HOLD_position", "scale_down")) %>%
      row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
      column_spec(2:ncol(df1), width = "3cm") %>%
      add_header_above(setNames(ncol(df1),species_caption),bold = TRUE, escape = FALSE, align = "l")
    
      print(amr_gene_table1)
    
    
    
      amr_gene_table2 <- knitr::kable(df2,format='latex',booktabs = T,align = "c")%>%
      kable_styling(latex_options = c("HOLD_position", "scale_down")) %>%
      row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
      column_spec(2:ncol(df2), width = "3cm") %>%
      add_header_above(setNames(ncol(df2),species_caption),bold = TRUE, escape = FALSE, align = "l")
    
      print(amr_gene_table2)
    }else{
      amr_gene_table <- knitr::kable(df,format='latex',booktabs = T,align = "c")%>%
      kable_styling(latex_options = c("HOLD_position", "scale_down")) %>%
      row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
      column_spec(2:ncol(df), width = "3cm") %>%
      add_header_above(setNames(ncol(df),species_caption),bold = TRUE, escape = FALSE, align = "l")
    
      print(amr_gene_table)
        
      }
    
  
  }else{
    amr_gene_table <- knitr::kable(df,format='latex',booktabs = T,align = "c")%>%
    kable_styling(position = "left", font_size = 7) %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
    column_spec(2:ncol(df), width = "3cm") %>%
    add_header_above(setNames(ncol(df),species_caption),bold = TRUE, escape = FALSE, align = "l")

    print(amr_gene_table)
  }
  
  
}

```






```{r no_amr_genes_table ,echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
#list existing sample_id in the mlst table
no_amr <- wgs_df$wgs_id[!(wgs_df$wgs_id %in% AMR_df$wgs_id)]

if (length(no_amr) !=0){
  sample_id <- wgs_df$sample_id[!(wgs_df$sample_id %in% AMR_df$sample_id)]
  wgs_id <- no_amr
  remarks <- "No AMR determinant detected"
  
  df <- data.frame(sample_id, wgs_id, remarks)
  
  no_amr_table <- kable(df,align = "c", row.names = FALSE) %>%
    kable_styling(position = "left") %>%
    row_spec(0, background = "#D4D4D4",bold = TRUE)
   


  print(no_amr_table)
  
}

```



\end{landscape}
````



