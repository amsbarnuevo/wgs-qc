#remove special characters and number from column header
colnames(mlst_result_df) <- gsub("\\s*\\(.*", "", colnames(mlst_result_df))
# Apply gsub to get text inside the parenthesis
mlst_result_df <- apply(mlst_result_df, 2, function(x) gsub("\\(([^()]*)\\)|.", "\\1", x, perl=T))
# Convert back to data frame
mlst_result_df <- as.data.frame(mlst_result_df)
#combine the two dataframe
mlst_result_df <- cbind(mlst_info_df,mlst_result_df)
#assign new name to dataframe
nam <- paste("df", i, sep = "_")
assign(nam, mlst_result_df[mlst_result_df$species==i,])
mslt_df_list <- c(mslt_df_list, nam)
}
#Remain Data column
mlst_df_clean <- mlst_df %>%
rename("sample_id" = 1,
"species" = 2,
"MLST" = 3)
#drop row without species
mlst_df_clean <- subset(mlst_df_clean, mlst_df_clean$species != '-')
#extract text before the first period in sample_id column
mlst_df_clean$sample_id <- sub("\\..*", "", mlst_df_clean$sample_id)
#change "-" to "_" in sample_id column
mlst_df_clean$sample_id <- gsub("-", "_", mlst_df_clean$sample_id, fixed=TRUE)
#merge wgs_id from wgs_df to mlst_df to set as species value
wgs_species <- subset(wgs_df, , select = c("sample_id", "wgs_id"))
mlst_df_clean <- merge(mlst_df_clean,wgs_species,by = "sample_id")
#reorder column
mlst_df_clean <- mlst_df_clean %>%
relocate(wgs_id, .after = species)
#list unique species in the dataframe
species_list <- unique(mlst_df_clean$species)
mlst_df_list = c()
#create multiple dataframe for each species
for(i in species_list) {
#retain first three columns
mlst_info_df <- subset(mlst_df_clean, select = 1:4)
#remove first three columns
mlst_result_df <- subset(mlst_df_clean, , select = -c(1, 2, 3,4))
#use first row data as column names in r
colnames(mlst_result_df)=mlst_result_df[c(1),]
#remove special characters and number from column header
colnames(mlst_result_df) <- gsub("\\s*\\(.*", "", colnames(mlst_result_df))
# Apply gsub to get text inside the parenthesis
mlst_result_df <- apply(mlst_result_df, 2, function(x) gsub("\\(([^()]*)\\)|.", "\\1", x, perl=T))
# Convert back to data frame
mlst_result_df <- as.data.frame(mlst_result_df)
#combine the two dataframe
mlst_result_df <- cbind(mlst_info_df,mlst_result_df)
#assign new name to dataframe
nam <- paste("df", i, sep = "_")
assign(nam, mlst_result_df[mlst_result_df$species==i,])
mlst_df_list <- c(mlst_df_list, nam)
}
mlst_df_list
map(mlst_df_list, ~.x |> kable(booktabs = T))
colnames(qc_summary_df) <- c('WGS_ID','Number')
qc_summary_df %>%
kable(booktabs = T, align = "lc")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "8cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
#map(df.list, ~.x |>  mutate(across(everything(), ~cell_spec(., "latex", background = ifelse(.x==1,  "red","white"), color = ifelse(.x==1, "red","white")))) |>
#kbl(escape = FALSE,
#booktabs = TRUE))
for(i in mlst_df_list) {
i %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
}
#map(df.list, ~.x |>  mutate(across(everything(), ~cell_spec(., "latex", background = ifelse(.x==1,  "red","white"), color = ifelse(.x==1, "red","white")))) |>
#kbl(escape = FALSE,
#booktabs = TRUE))
for(i in mlst_df_list) {
i %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
print(i)
}
for(i in mlst_df_list) {
at_table <- kable(i,align = "c", escape = FALSE) %>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
print(at_table)
cat("\\vspace{1em}")
}
#map(df.list, ~.x |>  mutate(across(everything(), ~cell_spec(., "latex", background = ifelse(.x==1,  "red","white"), color = ifelse(.x==1, "red","white")))) |>
#kbl(escape = FALSE,
#booktabs = TRUE))
for(df in mlst_df_list) {
print(kable(df,align = "c", escape = FALSE) %>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c"))
cat("\\vspace{1em}")
}
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver6.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver6.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#(wgs_df, file="wgs_qc_data.csv")
#write.csv(result, file="result_wgs_qc_data.csv")
#map(df.list, ~.x |>  mutate(across(everything(), ~cell_spec(., "latex", background = ifelse(.x==1,  "red","white"), color = ifelse(.x==1, "red","white")))) |>
#kbl(escape = FALSE,
#booktabs = TRUE))
for (df in mlst_df_list) {
print(kable(df, format = "latex"))
#cat("\n\n")  # Add extra newline for separation
cat("\\vspace{1em}")
}
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver6.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#(wgs_df, file="wgs_qc_data.csv")
#write.csv(result, file="result_wgs_qc_data.csv")
#map(df.list, ~.x |>  mutate(across(everything(), ~cell_spec(., "latex", background = ifelse(.x==1,  "red","white"), color = ifelse(.x==1, "red","white")))) |>
#kbl(escape = FALSE,
#booktabs = TRUE))
for (df in mlst_df_list) {
df <- as.data.frame(df)
print(kable(df, format = "latex"))
#cat("\n\n")  # Add extra newline for separation
cat("\\vspace{1em}")
}
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver6.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#(wgs_df, file="wgs_qc_data.csv")
#write.csv(result, file="result_wgs_qc_data.csv")
