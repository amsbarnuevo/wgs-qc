rs_vec <- rs_df[['WHON5_CODE']]
rs_vec <- paste(rs_vec,'RIS_site', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
#Pan susceptible
referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
cols_without_na <- antibiotics[colSums(!is.na(df[antibiotics])) == nrow(df)]
df <- df %>%
filter(if_all(c(cols_without_na), ~ .x == "S"))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '(+)'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, ESBL_site == '(+)')}
#Bind "refer first" results
first_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
first_result$ref_days <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"first"}
first_result$RIS <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"R"}
#Filter dataframe with pan-susceptible result
pans_s <- pan_s_selector(df, org_code)
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,pans_s$rs_vec)}
if (org_code == 'kpn'){
pans_s <- pan_s_selector(df, org_code)
rs_vec <- c('IPM_ND10_RIS_site','IPM_NM_RIS_site','IPM_NE_RIS_site','MEM_ND10_RIS_site','MEM_NM_RIS_site',
'MEM_NE_RIS_site','ETP_ND10_RIS_site','ETP_NM_RIS_site','ETP_NE_RIS_site')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,rs_vec)}
}
#add new column to separate referral days and set RIS value to "S"
pans_s_result$ref_days <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"pan"}
pans_s_result$RIS <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"S"}
#Bind "refer all and first" results
unusual_result <- rbind(first_result, pans_s_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
names(unusual_result)[3]<-paste("Referral_Date")
#edit format
unusual_result$Referral_Date <- format(as.Date(unusual_result$Referral_Date), "%Y-%m-%d")
unusual_result$Spec_Date <- format(as.Date(unusual_result$Spec_Date), "%Y-%m-%d")
unusual_result$AccessionNo <- sub("_", "-", unusual_result$AccessionNo)
duplicates <- unusual_result$AccessionNo[duplicated(unusual_result$AccessionNo)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(AccessionNo, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$AccessionNo,decreasing = FALSE), ]
unusual_filename <- paste("Excel/",org_code,"_unusual_list_raw.csv", sep="")
write.csv(unusual_result, file=unusual_filename)
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco[[1]],'eco')
kpn_unusual_result <- unusual_result(df_kpn[[1]],'kpn')
aba_unusual_result <- unusual_result(df_aba[[1]],'aba')
pae_unusual_result <- unusual_result(df_pae[[1]],'pae')
efa_unusual_result <- unusual_result(df_efa[[1]],'efa')
sgc_unusual_result <- unusual_result(df_sgc[[1]],'sgc')
spy_unusual_result <- unusual_result(df_spy[[1]],'spy')
sau_unusual_result <- unusual_result(df_sau[[1]],'sau')
knitr::opts_chunk$set(echo = FALSE, comment = "")
library(tidyverse)
library(dplyr)
library(knitr)
library(kableExtra)
library(tinytex)
library(readxl)
library(round)
library(stringr)
library(pander)
library(janitor)
library(lubridate)
library(data.table)
library(conflicted)
library(xlsx)
library(openxlsx)
library(svDialogs)
conflicts_prefer(dplyr::filter)
conflicts_prefer(openxlsx::loadWorkbook)
conflicts_prefer(openxlsx::saveWorkbook)
setwd("D:/ALLYSA FILE/2024/DMU Projects/referable-isolates")
#reading data file
df <- read_xlsx("Excel/combined_lab_site_referred_data_07_29_2024.xlsx")
accession_no <- dlgInput("Enter a accession number:", Sys.info()[" "])$res
#specimen_date <- dlgInput("Enter a specimen date (yyyy-mm):", Sys.info()[" "])$res
#filter dataframe based on accession number
site_df <- df %>%
filter(grepl(accession_no, AccessionNo))
setwd("D:/ALLYSA FILE/2024/DMU Projects/referable-isolates")
org_dataframe <- function(df,org){
#List all organism based on organism group
org_path <- "Excel/ORG_GROUPINGS.xlsx"
df_org <- read_xlsx(org_path, sheet = org)
org_vec <- na.omit(df_org[['ORG']])
org_df <- df[df$OrganismCode_site %in% org_vec, ]
#List sterile and non-sterile samples
sample_path <- "Excel/SPCLIST_group.xlsx"
ss_df <- read_xlsx(sample_path, sheet = org)
ss_vec <- na.omit(ss_df[['C_ENGLISH']])
#Generate dataframe for referral regardless of date
org_df <- org_df[org_df$Spec_Type_site %in% ss_vec, ]
#Reading data file for antibiotics
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
#Listing of antibiotics per organism
al_df <- read_xlsx(antibiotic_path, sheet = org)
#eco_ra_r <- referred_all_r(df_eco, paste(eco_rs_a_r$rs_vec,'ris', sep = '_'))
al_vec <- al_df[['WHON5_CODE']]
al_vec <- paste(al_vec,'RIS_site', sep = '_')
#list exisiting columns only in the dataframe included in the antibiotic list
al_vec <- colnames(df[,intersect(al_vec, colnames(df))])
keeps <- c('AccessionNo','OrganismCode_site','Referral Date','Spec_Date','Spec_Type_site','Urine_ColCt_site','Growth_site','ESBL_site','ICR_site')
org_df <- subset(org_df, select = c(keeps, al_vec))
#filter dataframe based on urine count
org_df$Urine_ColCt_site <- as.numeric(gsub("[^[:alnum:]]", "", org_df$Urine_ColCt_site ))
org_df <- subset(org_df, org_df$Urine_ColCt_site  > 10000 | is.na(org_df$Urine_ColCt_site ))
#org_filename <- paste("Excel/","df_",org,".csv",sep = "")
#write.csv(org_df, file=org_filename)
return(list(data.frame(org_df), al_vec = al_vec))
}
df_eco <- org_dataframe(site_df,'eco')
df_kpn <- org_dataframe(site_df,'kpn')
df_aba <- org_dataframe(site_df,'aba')
df_pae <- org_dataframe(site_df,'pae')
df_efa <- org_dataframe(site_df,'efa')
df_sgc <- org_dataframe(site_df,'sgc')
df_spy <- org_dataframe(site_df,'spy')
df_sau <- org_dataframe(site_df,'sau')
#Selecting antibitics based on referral date and RIS result
referral_selector <- function(df,sheet_name,ref_days,ris_result){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_df <- rs_df[rs_df$REF_DAYS == ref_days & rs_df$RIS == ris_result, ]
rs_vec <- rs_df[['WHON5_CODE']]
rs_vec <- paste(rs_vec,'RIS_site', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
pan_s_selector <- function(df,sheet_name){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_vec <- rs_df[['WHON5_CODE']]
rs_vec <- paste(rs_vec,'RIS_site', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
#Pan susceptible
referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
cols_without_na <- antibiotics[colSums(!is.na(df[antibiotics])) == nrow(df)]
df <- df %>%
filter(if_all(c(cols_without_na), ~ .x == "S"))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '(+)'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, ESBL_site == '(+)')}
#Bind "refer first" results
first_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
first_result$ref_days <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"first"}
first_result$RIS <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"R"}
#Filter dataframe with pan-susceptible result
pans_s <- pan_s_selector(df, org_code)
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,pans_s$rs_vec)}
if (org_code == 'kpn'){
pans_s <- pan_s_selector(df, org_code)
rs_vec <- c('IPM_ND10_RIS_site','IPM_NM_RIS_site','IPM_NE_RIS_site','MEM_ND10_RIS_site','MEM_NM_RIS_site',
'MEM_NE_RIS_site','ETP_ND10_RIS_site','ETP_NM_RIS_site','ETP_NE_RIS_site')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,rs_vec)}
}
#add new column to separate referral days and set RIS value to "S"
pans_s_result$ref_days <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"pan"}
pans_s_result$RIS <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"S"}
#Bind "refer all and first" results
unusual_result <- rbind(first_result, pans_s_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
names(unusual_result)[3]<-paste("Referral_Date")
#edit format
unusual_result$Referral_Date <- format(as.Date(unusual_result$Referral_Date), "%Y-%m-%d")
unusual_result$Spec_Date <- format(as.Date(unusual_result$Spec_Date), "%Y-%m-%d")
unusual_result$AccessionNo <- sub("_", "-", unusual_result$AccessionNo)
duplicates <- unusual_result$AccessionNo[duplicated(unusual_result$AccessionNo)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(AccessionNo, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$AccessionNo,decreasing = FALSE), ]
unusual_filename <- paste("Excel/",org_code,"_unusual_list_raw.csv", sep="")
write.csv(unusual_result, file=unusual_filename)
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco[[1]],'eco')
kpn_unusual_result <- unusual_result(df_kpn[[1]],'kpn')
aba_unusual_result <- unusual_result(df_aba[[1]],'aba')
pae_unusual_result <- unusual_result(df_pae[[1]],'pae')
efa_unusual_result <- unusual_result(df_efa[[1]],'efa')
sgc_unusual_result <- unusual_result(df_sgc[[1]],'sgc')
spy_unusual_result <- unusual_result(df_spy[[1]],'spy')
sau_unusual_result <- unusual_result(df_sau[[1]],'sau')
knitr::opts_chunk$set(echo = FALSE, comment = "")
library(tidyverse)
library(dplyr)
library(knitr)
library(kableExtra)
library(tinytex)
library(readxl)
library(round)
library(stringr)
library(pander)
library(janitor)
library(lubridate)
library(data.table)
library(conflicted)
library(xlsx)
library(openxlsx)
library(svDialogs)
conflicts_prefer(dplyr::filter)
conflicts_prefer(openxlsx::loadWorkbook)
conflicts_prefer(openxlsx::saveWorkbook)
setwd("D:/ALLYSA FILE/2024/DMU Projects/referable-isolates")
#reading data file
df <- read_xlsx("Excel/combined_lab_site_referred_data_07_29_2024.xlsx")
accession_no <- dlgInput("Enter a accession number:", Sys.info()[" "])$res
#specimen_date <- dlgInput("Enter a specimen date (yyyy-mm):", Sys.info()[" "])$res
#filter dataframe based on accession number
site_df <- df %>%
filter(grepl(accession_no, AccessionNo))
setwd("D:/ALLYSA FILE/2024/DMU Projects/referable-isolates")
org_dataframe <- function(df,org){
#List all organism based on organism group
org_path <- "Excel/ORG_GROUPINGS.xlsx"
df_org <- read_xlsx(org_path, sheet = org)
org_vec <- na.omit(df_org[['ORG']])
org_df <- df[df$OrganismCode_site %in% org_vec, ]
#List sterile and non-sterile samples
sample_path <- "Excel/SPCLIST_group.xlsx"
ss_df <- read_xlsx(sample_path, sheet = org)
ss_vec <- na.omit(ss_df[['C_ENGLISH']])
#Generate dataframe for referral regardless of date
org_df <- org_df[org_df$Spec_Type_site %in% ss_vec, ]
#Reading data file for antibiotics
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
#Listing of antibiotics per organism
al_df <- read_xlsx(antibiotic_path, sheet = org)
#eco_ra_r <- referred_all_r(df_eco, paste(eco_rs_a_r$rs_vec,'ris', sep = '_'))
al_vec <- al_df[['WHON5_CODE']]
al_vec <- paste(al_vec,'RIS_site', sep = '_')
#list exisiting columns only in the dataframe included in the antibiotic list
al_vec <- colnames(df[,intersect(al_vec, colnames(df))])
keeps <- c('AccessionNo','OrganismCode_site','Referral Date','Spec_Date','Spec_Type_site','Urine_ColCt_site','Growth_site','ESBL_site','ICR_site')
org_df <- subset(org_df, select = c(keeps, al_vec))
#filter dataframe based on urine count
org_df$Urine_ColCt_site <- as.numeric(gsub("[^[:alnum:]]", "", org_df$Urine_ColCt_site ))
org_df <- subset(org_df, org_df$Urine_ColCt_site  > 10000 | is.na(org_df$Urine_ColCt_site ))
#org_filename <- paste("Excel/","df_",org,".csv",sep = "")
#write.csv(org_df, file=org_filename)
return(list(data.frame(org_df), al_vec = al_vec))
}
df_eco <- org_dataframe(site_df,'eco')
df_kpn <- org_dataframe(site_df,'kpn')
df_aba <- org_dataframe(site_df,'aba')
df_pae <- org_dataframe(site_df,'pae')
df_efa <- org_dataframe(site_df,'efa')
df_sgc <- org_dataframe(site_df,'sgc')
df_spy <- org_dataframe(site_df,'spy')
df_sau <- org_dataframe(site_df,'sau')
#Selecting antibitics based on referral date and RIS result
referral_selector <- function(df,sheet_name,ref_days,ris_result){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_df <- rs_df[rs_df$REF_DAYS == ref_days & rs_df$RIS == ris_result, ]
rs_vec <- rs_df[['WHON5_CODE']]
rs_vec <- paste(rs_vec,'RIS_site', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
pan_s_selector <- function(df,sheet_name){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_vec <- rs_df[['WHON5_CODE']]
rs_vec <- paste(rs_vec,'RIS_site', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
#Pan susceptible
referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
cols_without_na <- antibiotics[colSums(!is.na(df[antibiotics])) == nrow(df)]
df <- df %>%
filter(if_all(c(cols_without_na), ~ .x == "S"))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '(+)'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, ESBL_site == '(+)')}
#Bind "refer first" results
first_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
first_result$ref_days <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"first"}
first_result$RIS <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"R"}
#Filter dataframe with pan-susceptible result
pans_s <- pan_s_selector(df, org_code)
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,pans_s$rs_vec)}
if (org_code == 'kpn'){
pans_s <- pan_s_selector(df, org_code)
rs_vec <- c('IPM_ND10_RIS_site','IPM_NM_RIS_site','IPM_NE_RIS_site','MEM_ND10_RIS_site','MEM_NM_RIS_site',
'MEM_NE_RIS_site','ETP_ND10_RIS_site','ETP_NM_RIS_site','ETP_NE_RIS_site')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,rs_vec)}
}
#add new column to separate referral days and set RIS value to "S"
pans_s_result$ref_days <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"pan"}
pans_s_result$RIS <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"S"}
#Bind "refer all and first" results
unusual_result <- rbind(first_result, pans_s_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
names(unusual_result)[3]<-paste("Referral_Date")
#edit format
unusual_result$Referral_Date <- format(as.Date(unusual_result$Referral_Date), "%Y-%m-%d")
unusual_result$Spec_Date <- format(as.Date(unusual_result$Spec_Date), "%Y-%m-%d")
unusual_result$AccessionNo <- sub("_", "-", unusual_result$AccessionNo)
duplicates <- unusual_result$AccessionNo[duplicated(unusual_result$AccessionNo)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(AccessionNo, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$AccessionNo,decreasing = FALSE), ]
unusual_filename <- paste("Excel/",org_code,"_unusual_list_raw.csv", sep="")
write.csv(unusual_result, file=unusual_filename)
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco[[1]],'eco')
kpn_unusual_result <- unusual_result(df_kpn[[1]],'kpn')
aba_unusual_result <- unusual_result(df_aba[[1]],'aba')
pae_unusual_result <- unusual_result(df_pae[[1]],'pae')
efa_unusual_result <- unusual_result(df_efa[[1]],'efa')
sgc_unusual_result <- unusual_result(df_sgc[[1]],'sgc')
spy_unusual_result <- unusual_result(df_spy[[1]],'spy')
sau_unusual_result <- unusual_result(df_sau[[1]],'sau')
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
