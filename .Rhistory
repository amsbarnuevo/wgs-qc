library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_df <- merge(unique(wgs_df), unique(result_df), by = "sample_id", all.x= TRUE)
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
View(wgs_samplesheet)
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
View(wgs_df)
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
View(wgs_df)
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
View(wgs_df)
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
View(wgs_df)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_df <- merge(unique(wgs_df), unique(result_df), by = "sample_id", all.x= TRUE)
wgs_df$iso_num <- seq.int(nrow(wgs_df))
wgs_df$ORG[grepl("Salmonella",wgs_df$wgs_id)] = "sal"
wgs_df$ORG[grepl("Shigella",wgs_df$wgs_id)] = "shi"
wgs_df$ORG[grepl("Vibrio",wgs_df$wgs_id)] = "vic"
wgs_df$warning_count <- ifelse(wgs_df$check_result == 'WARNING',1,
ifelse(wgs_df$dups_result == 'WARNING',2,
ifelse(wgs_df$check_result == 'WARNING' & wgs_df$dups_result == 'WARNING',3,0)))
wgs_warning_df <- filter(wgs_df, warning_count!=0 )
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
View(wgs_samplesheet)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_samplesheet <- wgs_samplesheet %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore)) %>%
mutate(sample_id = sapply(sample_id, remove_second_underscore))
#Get experiment name
WGS_exp_name <- unique(wgs_samplesheet[['experiment name']])
View(wgs_samplesheet)
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
View(wgs_samplesheet)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
View(result)
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
View(wgs_samplesheet)
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
View(wgs_samplesheet)
View(wgs_samplesheet_good)
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
result <- read_xlsx("data_files/result.xlsx")
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
View(result)
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
View(wgs_result_df)
View(wgs_samplesheet_good)
View(wgs_samplesheet)
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver5.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
