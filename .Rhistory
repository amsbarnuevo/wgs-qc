df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, ESBL_site == '(+)')}
#Bind "refer first" results
first_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
first_result$ref_days <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"first"}
first_result$RIS <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"R"}
#Filter dataframe with pan-susceptible result
pans_s <- pan_s_selector(df, org_code)
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,pans_s$rs_vec)}
if (org_code == 'kpn'){
pans_s <- pan_s_selector(df, org_code)
rs_vec <- c('IPM_ND10_RIS_site','IPM_NM_RIS_site','IPM_NE_RIS_site','MEM_ND10_RIS_site','MEM_NM_RIS_site',
'MEM_NE_RIS_site','ETP_ND10_RIS_site','ETP_NM_RIS_site','ETP_NE_RIS_site')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
pans_s_result <- if (nrow(pans_s[[1]]) != 0){referred_pan_s(df,rs_vec)}
}
#add new column to separate referral days and set RIS value to "S"
pans_s_result$ref_days <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"pan"}
pans_s_result$RIS <- if ((nrow(pans_s_result) != 0) && !is.null(pans_s_result)) {"S"}
#Bind "refer all and first" results
unusual_result <- rbind(first_result, pans_s_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
names(unusual_result)[3]<-paste("Referral_Date")
#edit format
unusual_result$Referral_Date <- format(as.Date(unusual_result$Referral_Date), "%Y-%m-%d")
unusual_result$Spec_Date <- format(as.Date(unusual_result$Spec_Date), "%Y-%m-%d")
unusual_result$AccessionNo <- sub("_", "-", unusual_result$AccessionNo)
duplicates <- unusual_result$AccessionNo[duplicated(unusual_result$AccessionNo)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(AccessionNo, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$AccessionNo,decreasing = FALSE), ]
unusual_filename <- paste("Excel/",org_code,"_unusual_list_raw.csv", sep="")
write.csv(unusual_result, file=unusual_filename)
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco[[1]],'eco')
kpn_unusual_result <- unusual_result(df_kpn[[1]],'kpn')
aba_unusual_result <- unusual_result(df_aba[[1]],'aba')
pae_unusual_result <- unusual_result(df_pae[[1]],'pae')
efa_unusual_result <- unusual_result(df_efa[[1]],'efa')
sgc_unusual_result <- unusual_result(df_sgc[[1]],'sgc')
spy_unusual_result <- unusual_result(df_spy[[1]],'spy')
sau_unusual_result <- unusual_result(df_sau[[1]],'sau')
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_df[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_df$sample_name <- gsub("STC", "STC_", wgs_df$sample_name, fixed=TRUE)
}
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#manually add result for STC
if(stc_sample_count !=0){
sample_name = stc_sample
sample_name <- gsub("STC", "STC_", sample_name, fixed=TRUE)
arsrl_org = "Pseudomonas aeruginosa"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
View(wgs_df)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H')
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_df <- merge(unique(wgs_df), unique(result_df), by = "sample_id", all.x= TRUE)
wgs_df$iso_num <- seq.int(nrow(wgs_df))
wgs_df$ORG[grepl("Salmonella",wgs_df$wgs_id)] = "sal"
wgs_df$ORG[grepl("Shigella",wgs_df$wgs_id)] = "shi"
wgs_df$ORG[grepl("Vibrio",wgs_df$wgs_id)] = "vic"
#identify organism groups
wgs_df$wgs_id <- ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id == 'Salmonella enterica subsp. enterica serovar Typhi'),"Salmonella typhi", ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id != 'Salmonella enterica subsp. enterica serovar Typhi'),"Salmonella enterica", wgs_df$wgs_id))
#identify salmonella typhi and salmonella nontyphi
wgs_df$ORG <- ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id == 'Salmonella typhi'), 'sat', wgs_df$ORG)
wgs_df$warning_count <- ifelse(wgs_df$check_result == 'WARNING',1,
ifelse(wgs_df$dups_result == 'WARNING',2,
ifelse(wgs_df$check_result == 'WARNING' & wgs_df$dups_result == 'WARNING',3,0)))
wgs_warning_df <- filter(wgs_df, warning_count!=0 )
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_samplesheet <- wgs_samplesheet %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore)) %>%
mutate(sample_id = sapply(sample_id, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_samplesheet[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_samplesheet$sample_name <- gsub("STC", "STC_", wgs_samplesheet$sample_name, fixed=TRUE)
wgs_samplesheet$sample_id <- gsub("STC", "STC_", wgs_samplesheet$sample_id, fixed=TRUE)
}
#Get experiment name
WGS_exp_name <- unique(wgs_samplesheet[['experiment name']])
#filter dataframe based on the sample_id present in the WGS dataframe
wgs_samplesheet_good <- wgs_samplesheet[wgs_samplesheet$sample_id %in% id_list, ]
wgs_samplesheet_good <- subset(wgs_samplesheet_good, select = c('sample_id','description'))
wgs_df <- merge(unique(wgs_df), unique(wgs_samplesheet_good), by = "sample_id", all.x= TRUE)
#arsrl_result_df$sample_id <- gsub("_", "\\_", arsrl_result_df$sample_id, fixed=TRUE)
#wgs_df$sample_id <- gsub("_", "\\_", wgs_df$sample_id, fixed=TRUE)
retain_column <- c('iso_num','sample_id','wgs_id','description')
wgs_result_df <- subset(wgs_df, select = retain_column)
#qc_listing_df <- merge(x=arsrl_result_df,y=wgs_result_df, by="sample_id", all.x=TRUE)
qc_listing_df <- merge(unique(arsrl_result_df), unique(wgs_result_df), by = "sample_id", all.x= TRUE)
# Define a function to get the part before the first white space
get_value_before_whitespace <- function(x) {
parts <- strsplit(as.character(x), " ")[[1]]
return(parts[1])
}
# Apply the function to the specified column
qc_listing_df$Genus <- sapply(qc_listing_df$arsrl_org, get_value_before_whitespace)
qc_listing_nc <- qc_listing_df %>%
rowwise() %>%
mutate(concordant =
grepl(Genus, wgs_id)
)
View(qc_listing_df)
View(qc_listing_df)
#filter dataframe based on the sample_id present in the WGS dataframe
wgs_samplesheet_good <- wgs_samplesheet[wgs_samplesheet$sample_id %in% id_list, ]
wgs_samplesheet_good <- subset(wgs_samplesheet_good, select = c('sample_id','description'))
wgs_df <- merge(unique(wgs_df), unique(wgs_samplesheet_good), by = "sample_id", all.x= TRUE)
#arsrl_result_df$sample_id <- gsub("_", "\\_", arsrl_result_df$sample_id, fixed=TRUE)
#wgs_df$sample_id <- gsub("_", "\\_", wgs_df$sample_id, fixed=TRUE)
retain_column <- c('iso_num','sample_id','wgs_id','description')
wgs_result_df <- subset(wgs_df, select = retain_column)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
#nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,"white","yellow")
nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,paste(,qc_listing_df$arsrl_org,"(x)"),qc_listing_df$arsrl_org)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
#nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,"white","yellow")
nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,paste(qc_listing_df$arsrl_org,"(x)"),qc_listing_df$arsrl_org)
qc_listing_df = subset(qc_listing_df, select = -c(Genus) )
#qc_listing_df$iso_num <- seq.int(nrow(qc_listing_df))
colnames(qc_listing_df) <- c('Sample ID','ARSRL','Isolate No.','WGS','Description')
qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
qc_listing_df %>%
kable(booktabs = T, align = "c", escape = FALSE)%>%
column_spec(1, width = "1cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3, width = "1.5cm") %>%
column_spec(4, width = "5.25cm") %>%
column_spec(5, width = "5.25cm") %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c") %>%
footnote(general = c("PASS","  |  ",
"\\\\colorbox{Peach}{WARNING}","  |  ",
"\\\\colorbox{Salmon}{FAILURE}","  |  ",
"\\\\textcolor{Blue}{EXCEEDS THRESHOLD METRIC/S}","  |  ",
"\\\\colorbox{Yellow}{NON-CONCORDANT}","  |"),
general_title = "Legend:",
footnote_as_chunk = T, escape = F)
View(qc_listing_nc)
nc_warning <- ifelse(qc_listing_nc$concordant == FALSE,paste(qc_listing_df$arsrl_org,"(x)"),qc_listing_df$arsrl_org)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
#nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,"white","yellow")
nc_warning <- ifelse(qc_listing_nc$concordant == FALSE,paste(qc_listing_df$arsrl_org,"(x)"),qc_listing_df$arsrl_org)
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_df[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_df$sample_name <- gsub("STC", "STC_", wgs_df$sample_name, fixed=TRUE)
}
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#manually add result for STC
if(stc_sample_count !=0){
sample_name = stc_sample
sample_name <- gsub("STC", "STC_", sample_name, fixed=TRUE)
arsrl_org = "Pseudomonas aeruginosa"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H')
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_df <- merge(unique(wgs_df), unique(result_df), by = "sample_id", all.x= TRUE)
wgs_df$iso_num <- seq.int(nrow(wgs_df))
wgs_df$ORG[grepl("Salmonella",wgs_df$wgs_id)] = "sal"
wgs_df$ORG[grepl("Shigella",wgs_df$wgs_id)] = "shi"
wgs_df$ORG[grepl("Vibrio",wgs_df$wgs_id)] = "vic"
#identify organism groups
wgs_df$wgs_id <- ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id == 'Salmonella enterica subsp. enterica serovar Typhi'),"Salmonella typhi", ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id != 'Salmonella enterica subsp. enterica serovar Typhi'),"Salmonella enterica", wgs_df$wgs_id))
#identify salmonella typhi and salmonella nontyphi
wgs_df$ORG <- ifelse((wgs_df$ORG == 'sal' & wgs_df$wgs_id == 'Salmonella typhi'), 'sat', wgs_df$ORG)
wgs_df$warning_count <- ifelse(wgs_df$check_result == 'WARNING',1,
ifelse(wgs_df$dups_result == 'WARNING',2,
ifelse(wgs_df$check_result == 'WARNING' & wgs_df$dups_result == 'WARNING',3,0)))
wgs_warning_df <- filter(wgs_df, warning_count!=0 )
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_samplesheet <- wgs_samplesheet %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore)) %>%
mutate(sample_id = sapply(sample_id, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_samplesheet[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_samplesheet$sample_name <- gsub("STC", "STC_", wgs_samplesheet$sample_name, fixed=TRUE)
wgs_samplesheet$sample_id <- gsub("STC", "STC_", wgs_samplesheet$sample_id, fixed=TRUE)
}
#Get experiment name
WGS_exp_name <- unique(wgs_samplesheet[['experiment name']])
#filter dataframe based on the sample_id present in the WGS dataframe
wgs_samplesheet_good <- wgs_samplesheet[wgs_samplesheet$sample_id %in% id_list, ]
wgs_samplesheet_good <- subset(wgs_samplesheet_good, select = c('sample_id','description'))
wgs_df <- merge(unique(wgs_df), unique(wgs_samplesheet_good), by = "sample_id", all.x= TRUE)
#arsrl_result_df$sample_id <- gsub("_", "\\_", arsrl_result_df$sample_id, fixed=TRUE)
#wgs_df$sample_id <- gsub("_", "\\_", wgs_df$sample_id, fixed=TRUE)
retain_column <- c('iso_num','sample_id','wgs_id','description')
wgs_result_df <- subset(wgs_df, select = retain_column)
#qc_listing_df <- merge(x=arsrl_result_df,y=wgs_result_df, by="sample_id", all.x=TRUE)
qc_listing_df <- merge(unique(arsrl_result_df), unique(wgs_result_df), by = "sample_id", all.x= TRUE)
# Define a function to get the part before the first white space
get_value_before_whitespace <- function(x) {
parts <- strsplit(as.character(x), " ")[[1]]
return(parts[1])
}
# Apply the function to the specified column
qc_listing_df$Genus <- sapply(qc_listing_df$arsrl_org, get_value_before_whitespace)
qc_listing_nc <- qc_listing_df %>%
rowwise() %>%
mutate(concordant =
grepl(Genus, wgs_id)
)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
#nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,"white","yellow")
nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,qc_listing_df$arsrl_org, paste0(qc_listing_df$arsrl_org,"(x)"))
View(qc_listing_df)
qc_listing_df = subset(qc_listing_df, select = -c(Genus) )
#qc_listing_df$iso_num <- seq.int(nrow(qc_listing_df))
colnames(qc_listing_df) <- c('Sample ID','ARSRL','Isolate No.','WGS','Description')
qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
qc_listing_df %>%
kable(booktabs = T, align = "c", escape = FALSE)%>%
column_spec(1, width = "1cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3, width = "1.5cm") %>%
column_spec(4, width = "5.25cm") %>%
column_spec(5, width = "5.25cm") %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c") %>%
footnote(general = c("PASS","  |  ",
"\\\\colorbox{Peach}{WARNING}","  |  ",
"\\\\colorbox{Salmon}{FAILURE}","  |  ",
"\\\\textcolor{Blue}{EXCEEDS THRESHOLD METRIC/S}","  |  ",
"\\\\colorbox{Yellow}{NON-CONCORDANT}","  |"),
general_title = "Legend:",
footnote_as_chunk = T, escape = F)
View(qc_listing_df)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
library(AMR)
