#Add Column with 'OR' condition in the antibiotic dataframe
if(!is.null(at_count_or) & length(at_count_or) !=0){
at_count <- cbind(at_count, at_count_or[!names(at_count_or) %in% names(at_count)])
}
#check if urine dataframe have values
if(nrow(at_count_ur) != 0 & length(at_count_ur) == 0){
df_at_ur <- df_antibiotic[df_antibiotic$FOR_UR == 'yes',]
df_at_colnames_ur <- na.omit(df_at_ur[['Antibiotic_Panels']])
at_count_ur[df_at_colnames_ur] <- 0
}
#Add Column with 'OR' condition in the antibiotic dataframe
if(length(at_count_add) != 0){
#Delete columns with Zero Value
at_count_add[apply(at_count_add, 2, function(x) all(x == 0))] <- NULL
if (length(at_count_add) == 0){
at_count_add["Colistin or Polymyxin B"] <- 0
at_count_add <- as.data.frame(at_count_add)
}else{
colnames(at_count_add) <- "Colistin or Polymyxin B"
at_count_add <- as.data.frame(at_count_add)
}
}
#Create new dataframe as table
#Create a column for Organism name
organism <- organism_name
#Create a column for the antibiotics
antibiotic <- c(colnames(at_count), colnames(at_count_ur),colnames(at_count_add))
#Create a column for the total number of testing per antibiotic
number <- as.vector(colSums(at_count, na.rm = TRUE))
number_ur <- as.vector(colSums(at_count_ur, na.rm = TRUE))
number_add <- as.vector(colSums(at_count_add, na.rm = TRUE))
number_total <- c(number,number_ur,number_add)
#Create a column to compute the percentage of the antibiotic testing
percent <- ifelse(number != 0, (number/at_total) * 100, 0)
percent_ur <- ifelse(number_ur != 0, (number_ur/tl_ur) * 100, 0)
percent_add <- ifelse(number_add != 0, (number_add/at_total) * 100, 0)
percent_all <- c(percent,percent_ur,percent_add)
percent_all <- format(round(percent_all , digits = 2), nsmall = 2)
#Create a new dataframe for antibiotic testing per organism
at_monitoring <- cbind.data.frame(organism,antibiotic, number_total, percent_all)
#Check if there are antibiotics with "OR" option
df_at_optional <- df_antibiotic[df_antibiotic$STATUS == 'optional',]
at_op_colnames <- na.omit(df_at_optional[['Antibiotic_Panels']])
#Omit the antibiotic with "OR" option if the number of testing is equal to zero in the computation of the overall percentage
at_ov_percentage <- at_monitoring[!(at_monitoring$antibiotic %in% at_op_colnames & at_monitoring$number == 0), ]
#Computing overall percentage of testing per organism group
pc_ave <- round(as.numeric(at_ov_percentage$percent))
pc_ave <- mean(pc_ave)
pc_ave <- format(round(pc_ave , digits = 2), nsmall = 2)
#add percent sign in percentage column
at_monitoring$percent_all = paste(at_monitoring$percent_all, "\\%")
#Add new row for organism with additional antibiotic for urine
df_at_ur <- df_antibiotic[df_antibiotic$FOR_UR == 'yes',]
#Add New Row for additional urine testing at Specific Index Position to Dataframe
if (nrow(df_at_ur) != 0){
insertRow <- function(data, new_row, r) {
data_new <- rbind(data[1:r, ],
new_row,
data[- (1:r), ])
rownames(data_new) <- 1:nrow(data_new)
return(data_new)
}
index <- as.numeric(length(colnames(at_count)))
newrow <- c(organism_name,'Additional for Urine', '', tl_ur)
at_monitoring=insertRow(at_monitoring, newrow, index)
}
#Add new row for organism with additional antibiotic
df_at_add <- df_antibiotic[df_antibiotic$OR_VAL == 'add',]
#Add New Row for additional antibiotic at Specific Index Position to Dataframe
if (nrow(df_at_add) != 0){
insertRow <- function(data, new_row, r){
data_new <- rbind(data[1:r, ],
new_row,
data[- (1:r), ])
rownames(data_new) <- 1:nrow(data_new)
return(data_new)
}
if (nrow(at_count_ur) !=0){
index <- (as.numeric(length(colnames(at_count))) + as.numeric(length(colnames(at_count_ur))) + 1)
}else{
index <- (as.numeric(length(colnames(at_count))))
}
newrow <- c(organism_name,'Additional Antibiotic/s', '', at_total)
at_monitoring=insertRow(at_monitoring, newrow, index)
}
#Create new dataframe for antibiotic testing monitoring summary
at_monitoring_summary <- data.frame(at_column = organism_name_2,at_total=at_total,at_pct=pc_ave)
#add percent sign in percentage column
at_monitoring_summary$at_pct = paste(at_monitoring_summary$at_pct, "\\%")
at_filename <- paste("Excel/",sheet_name,"_at_monitoring_df.csv",sep = "")
write.csv(at_monitoring, file=at_filename)
return(list(data.frame(at_monitoring),data.frame(at_monitoring_summary)))
}
ebc_at_monitoring <- at_monitoring('ebc','ENTEROBACTERIACEAE except \\\\textit{Salmonella} \\\\& \\\\textit{Shigella} species','ENTEROBACTERIACEAE except \\textit{Salmonella} \\& \\textit{Shigella} species')
sal_shi_at_monitoring <- at_monitoring("sal_shi","\\\\textit{Salmonella} \\\\& \\\\textit{Shigella}","\\textit{Salmonella} \\& \\textit{Shigella}")
vic_at_monitoring <- at_monitoring("vic","\\\\textit{Vibrio cholerae}","\\textit{Vibrio cholerae}")
ac_at_monitoring <- at_monitoring("ac","\\\\textit{Acinetobacter} sp.","\\textit{Acinetobacter} sp.")
pce_at_monitoring <- at_monitoring("pce","\\\\textit{Burkolderia cepacia} complex","\\textit{Burkolderia cepacia} complex")
pae_at_monitoring <- at_monitoring("pae","\\\\textit{Pseudomonas aeruginosa}","\\textit{Pseudomonas aeruginosa}")
pma_at_monitoring <- at_monitoring("pma","\\\\textit{Stenotrophomonas maltophilia}","\\textit{Stenotrophomonas maltophilia}")
non_ebc_at_monitoring <- at_monitoring("non_ebc","Other Non-Enterobacterales including \\\\textit{Pseudomonas} spp.","Other Non-Enterobacterales including \\textit{Pseudomonas} spp.")
hpi_hin_at_monitoring <- at_monitoring("hpi_hin","\\\\textit{Haemophilus influenzae} and \\\\textit{Haemophilus parainfluenzae}","\\textit{Haemophilus influenzae} and \\textit{Haemophilus parainfluenzae}")
bca_at_monitoring <- at_monitoring("bca","\\\\textit{Moraxella Catarrhallis}","\\textit{Moraxella Catarrhallis}")
ngo_at_monitoring <- at_monitoring("ngo","\\\\textit{Neisseria gonorrhoeae}","\\textit{Neisseria gonorrhoeae}")
nme_at_monitoring <- at_monitoring("nme","\\\\textit{Neisseria meningitidis}","\\textit{Neisseria meningitidis}")
ent_at_monitoring <- at_monitoring("ent","\\\\textit{Enterococcus} sp.","\\textit{Enterococcus} sp.")
sta_at_monitoring <- at_monitoring("sta","\\\\textit{Staphylococcus} sp.","\\textit{Staphylococcus} sp.")
spn_at_monitoring <- at_monitoring("spn","\\\\textit{Streptococcus pneumoniae}","\\textit{Streptococcus pneumoniae}")
bs_at_monitoring <- at_monitoring("bs","\\\\textit{Beta-Hemolytic Streptococci}","\\textit{Beta-Hemolytic Streptococci}")
svi_at_monitoring <- at_monitoring("svi","\\\\textit{Streptococcus viridans} group","\\textit{Streptococcus viridans} group")
aec_at_monitoring <- at_monitoring("aec","\\\\textit{Aerococcus} sp.","\\textit{Aerococcus} sp.")
aer_at_monitoring <- at_monitoring("aer","\\\\textit{Aeromonas} sp.","\\textit{Aeromonas} sp.")
ban_at_monitoring <- at_monitoring("ban","\\\\textit{Bacillus anthracis}","\\textit{Bacillus anthracis}")
bcs_at_monitoring <- at_monitoring("bcs","\\\\textit{Bacillus} sp.","\\textit{Bacillus} sp.")
cor_at_monitoring <- at_monitoring("cor","\\\\textit{Corynebacterium} sp.","\\textit{Corynebacterium} sp.")
hacek_at_monitoring <- at_monitoring("hacek","HACEK","HACEK")
lmo_at_monitoring <- at_monitoring("lmo","\\\\textit{Listeria monocytogenes}","\\textit{Listeria monocytogenes}")
mic_at_monitoring <- at_monitoring("mic"," \\\\textit{Micrococcus} sp."," \\textit{Micrococcus} sp.")
pas_at_monitoring <- at_monitoring("pas","\\\\textit{Pasteurella} sp.","\\textit{Pasteurella} sp.")
vis_at_monitoring <- at_monitoring("vis","\\\\textit{Vibrio} sp.","\\textit{Vibrio} sp.")
#merge all antibiotic monitoring summary
at_monitoring_summary <- rbind(ebc_at_monitoring[[2]],sal_shi_at_monitoring[[2]],vic_at_monitoring[[2]],ac_at_monitoring[[2]],pce_at_monitoring[[2]],pae_at_monitoring[[2]],pma_at_monitoring[[2]],non_ebc_at_monitoring[[2]],hpi_hin_at_monitoring[[2]],bca_at_monitoring[[2]],ngo_at_monitoring[[2]],nme_at_monitoring[[2]],ent_at_monitoring[[2]],sta_at_monitoring[[2]],spn_at_monitoring[[2]],bs_at_monitoring[[2]],svi_at_monitoring[[2]],aec_at_monitoring[[2]], aer_at_monitoring[[2]], ban_at_monitoring[[2]], bcs_at_monitoring[[2]], cor_at_monitoring[[2]], hacek_at_monitoring[[2]], lmo_at_monitoring[[2]], mic_at_monitoring[[2]], pas_at_monitoring[[2]], vis_at_monitoring[[2]])
#Delete at_monitoring_summary columns with Zero Value
at_monitoring_summary[at_monitoring_summary==0] <- NA
at_monitoring_summary <-at_monitoring_summary[complete.cases(at_monitoring_summary),]
#Other Phenotypic Test
phenotypic_test <- function(main_df,org){
tl_pheno <- nrow(main_df[main_df$organism %in% org, ])
df_pheno <- main_df[main_df$organism %in% org, ]
df_esbl <- df_pheno[!is.na(df_pheno$esbl), ]
df_mrsa <- df_pheno[!is.na(df_pheno$mrsa), ]
#positive_esbl <- nrow(df_pheno[df_pheno$esbl == '+', ])
nodata_esbl <- sum(is.na(df_pheno$esbl))
#nodata_esbl <- nrow(df_esbl[df_esbl$esbl == ' ', ])
positive_esbl <- nrow(df_esbl[df_esbl$esbl == '+', ])
pct_positive_esbl <- if (positive_esbl != 0) (positive_esbl/ tl_pheno) * 100 else 0
pct_positive_esbl <- format(round(pct_positive_esbl, 2), nsmall = 2)
negative_esbl <- nrow(df_esbl[df_esbl$esbl == '-', ])
pct_negative_esbl <- if (negative_esbl != 0) (negative_esbl/ tl_pheno) * 100 else 0
pct_negative_esbl <- format(round(pct_negative_esbl, 2), nsmall = 2)
nodata_mrsa <- sum(is.na(df_pheno$mrsa))
#nodata_mrsa <- nrow(df_mrsa[df_mrsa$mrsa == ' ', ])
positive_mrsa <- nrow(df_mrsa[df_mrsa$mrsa == '+', ])
pct_positive_mrsa <- if (positive_mrsa != 0) (positive_mrsa/ tl_pheno) * 100 else 0
pct_positive_mrsa <- format(round(pct_positive_mrsa, 2), nsmall = 2)
negative_mrsa <- nrow(df_mrsa[df_mrsa$mrsa == '-', ])
pct_negative_mrsa <- if (negative_mrsa != 0) (negative_mrsa/ tl_pheno) * 100 else 0
pct_negative_mrsa <- format(round(pct_negative_mrsa, 2), nsmall = 2)
return(list(tl_pheno = tl_pheno, nodata_esbl = nodata_esbl,positive_esbl = positive_esbl, negative_esbl = negative_esbl,nodata_mrsa = nodata_mrsa,positive_mrsa = positive_mrsa, negative_mrsa = negative_mrsa, pct_positive_esbl = pct_positive_esbl, pct_negative_esbl = pct_negative_esbl, pct_positive_mrsa = pct_positive_mrsa, pct_negative_mrsa = pct_negative_mrsa))
}
phenotypic_test_total <- function(phenotypic_pc){
pheno_tested <- as.numeric(phenotypic_pc)
pheno_tested_pc <- mean(pheno_tested)
#ebc_tested_pc <- if (ebc_tested_sum != 0) (ebc_tested_sum/ebc_amk$tl) else 0
pheno_tested_pc <- format(round(pheno_tested_pc, 2), nsmall = 2)
return(list(pheno_tested_pc = pheno_tested_pc))
}
#ESBL
eco_esbl <- phenotypic_test(data_summary_df,'eco')
kpn_esbl <- phenotypic_test(data_summary_df,'kpn')
eco_esbl_tl <- as.numeric(eco_esbl$pct_positive_esbl) + as.numeric(eco_esbl$pct_negative_esbl)
kpn_esbl_tl <- as.numeric(kpn_esbl$pct_positive_esbl) + as.numeric(kpn_esbl$pct_negative_esbl)
if(eco_esbl_tl == 0 & kpn_esbl_tl != 0){
esbl_total <- kpn_esbl_tl
}else{
if(kpn_esbl_tl == 0 & eco_esbl_tl != 0){
esbl_total <- eco_esbl_tl
}else{
esbl_total <- (eco_esbl_tl + kpn_esbl_tl) / 2
}
}
#esbl_total <- (eco_esbl_tl + kpn_esbl_tl) / 2
esbl_total <- format(round(esbl_total, 2), nsmall = 2)
#esbl_total <- phenotypic_test_total(c(eco_esbl$pct_positive_esbl,kpn_esbl$pct_positive_esbl,eco_esbl$pct_negative_esbl,kpn_esbl$pct_negative_esbl))
#MRSA
sau_mrsa <- phenotypic_test(data_summary_df,'sau')
mrsa_total <- (as.numeric(sau_mrsa$pct_positive_mrsa) + as.numeric(sau_mrsa$pct_negative_mrsa))
mrsa_total <- format(round(mrsa_total, 2), nsmall = 2)
#Remove data with invalid specimen date
if (length(invalid_specdate) !=0){
data_summary_clean <- data_summary_clean[!data_summary_clean$spec_date %in% invalid_specdate,]
}
#Urine count
#data_summary_clean$urine_count <- as.numeric(gsub("[^[:alnum:]]", "", data_summary_clean$urine_count))
referred_uc <- subset(data_summary_clean, data_summary_clean$urine_count > 10000 | is.na(data_summary_clean$urine_count))
write.csv(referred_uc, file="Excel/df_urine.csv")
#dataframe for KPN isolates
collection_date_1 <- c("2024-09", "2024-10", "2024-11", "2024-12", "2025-01", "2025-02")
kpn_all_ages <- data_summary_clean[grepl(paste(collection_date_1, collapse="|"), data_summary_clean$spec_date), ]
collection_date_2 <- c("2025-03", "2025-04", "2025-05", "2025-06", "2025-07", "2025-08")
kpn_neonates <- data_summary_clean[grepl(paste(collection_date_2, collapse="|"), data_summary_clean$spec_date), ]
org_dataframe <- function(df,org){
#List all organism based on organism group
org_path <- "Excel/ORG_GROUPINGS_updated.xlsx"
df_org <- read_xlsx(org_path, sheet = org)
org_vec <- na.omit(df_org[['ORG']])
org_df <- df[df$organism %in% org_vec & df$x_referred == 0, ]
#List sterile and non-sterile samples
sample_path <- "Excel/SPCLIST_group_updated.xlsx"
ss_df <- read_xlsx(sample_path, sheet = org)
ss_vec <- na.omit(ss_df[['C_ENGLISH']])
#Generate dataframe for referral regardless of date
org_df <- org_df[org_df$spec_type %in% ss_vec, ]
#Reading data file for antibiotics
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
#Listing of antibiotics per organism
al_df <- read_xlsx(antibiotic_path, sheet = org)
#eco_ra_r <- referred_all_r(df_eco, paste(eco_rs_a_r$rs_vec,'ris', sep = '_'))
al_vec <- al_df[['WHON5_CODE_LW']]
if (length(al_vec) !=0 ){
#list existing columns only in the dataframe included in the antibiotic list
al_vec <- intersect(al_vec, colnames(df))
al_vec <- paste(al_vec,'ris', sep = '_')
}
org_filename <- paste("Excel/","df_",org,".csv",sep = "")
write.csv(org_df, file=org_filename)
return(list(data.frame(org_df), al_vec = al_vec))
}
df_hin <- org_dataframe(data_summary_clean,'hin')
df_ngo <- org_dataframe(data_summary_clean,'ngo')
df_nme <- org_dataframe(data_summary_clean,'nme')
df_spn <- org_dataframe(data_summary_clean,'spn')
df_e157 <- org_dataframe(data_summary_clean,'157')
df_sal <- org_dataframe(data_summary_clean,'sal')
df_shi <- org_dataframe(data_summary_clean,'shi')
df_vic <- org_dataframe(data_summary_clean,'vic')
df_eco <- org_dataframe(referred_uc,'eco')
df_aba <- org_dataframe(referred_uc,'aba')
df_pae <- org_dataframe(referred_uc,'pae')
df_efa <- org_dataframe(referred_uc,'efa')
df_efm <- org_dataframe(referred_uc,'efm')
df_bs <- org_dataframe(referred_uc,'bs')
df_sau <- org_dataframe(referred_uc,'sau')
#for KPN
df_kpn <- org_dataframe(kpn_all_ages,'kpn')
df_kpn_neo <- org_dataframe(kpn_neonates,'kpn')
growth_unusual <- function(df,org_name, org_code){
keeps <- c('patient_id','sex','age','date_admis','spec_num','spec_date','spec_type','organism')
df_referred <- subset(df, select = c(keeps))
write.csv(df_referred, file=paste("Excel/",org_code,"_unusual_list.csv"))
ref_count_df <- nrow(df_referred)
org_name <- org_name
referral_tc <- data.frame(org_name,ref_count_df)
return(list(data.frame(df_referred), data.frame(referral_tc)))
}
hin_unusual_referral <- growth_unusual(df_hin[[1]],'\\textit{Haemophilus influenzae}','hin')
ngo_unusual_referral <- growth_unusual(df_ngo[[1]],'\\textit{Neisseria gonorrhoeae}','ngo')
nme_unusual_referral <- growth_unusual(df_nme[[1]],'\\textit{Neisseria meningitidis}','nme')
spn_unusual_referral <- growth_unusual(df_spn[[1]],'\\textit{Streptococcus pneumoniae}','spn')
e157_unusual_referral <- growth_unusual(df_e157[[1]],'\\\\textit{Escherichia coli} 0:157:H7','157')
sal_unusual_referral <- growth_unusual(df_sal[[1]],'\\textit{Salmonella species}','sal')
shi_unusual_referral <- growth_unusual(df_shi[[1]],'\\textit{Shigella species}','shi')
vic_unusual_referral <- growth_unusual(df_vic[[1]],'\\textit{Vibrio cholerae}','vic')
#Selecting antibitics based on referral date and RIS result
referral_selector <- function(df,sheet_name,ref_days,ris_result){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_df <- rs_df[rs_df$REF_DAYS == ref_days & rs_df$RIS == ris_result, ]
rs_vec <- rs_df[['WHON5_CODE_LW']]
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
pan_s_selector <- function(df,sheet_name){
antibiotic_path <- "Excel/CLSI_ORG_ATC_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_vec <- c(rs_df[['WHON5_CODE_DISK']], rs_df[['WHON5_CODE_MIC']], rs_df[['WHON5_CODE_ETEST']])
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
#Pan susceptible
referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
# Check if columns in columns_to_check have all NA values
cols_to_remove <- sapply(antibiotics, function(col) {
all(is.na(df[[col]]))
})
# Create a vector of column names to keep
columns_to_keep <- antibiotics[!cols_to_remove]
df <- df %>%
filter(if_any(columns_to_keep, ~ .x == 'S') | if_any(columns_to_keep, ~ .x == 'I'))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '+'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#Refer all regardless of date
lipo_r <- referral_selector(df,org_code,'l','r')
lipo_result <- if ((nrow(lipo_r[[1]]) != 0) & (length(lipo_r$rs_vec) != 0)){referred_ris1(df,'R', paste(lipo_r$rs_vec,'ris', sep = '_'))}
all_r <- referral_selector(df,org_code,'a','r')
all_r_result <- if ((nrow(all_r[[1]]) != 0) & (length(all_r$rs_vec) != 0)){referred_ris1(df,'R', paste(all_r$rs_vec,'ris', sep = '_'))}
all_ri <- referral_selector(df,org_code,'a','i_r')
all_ri_result <- if ((nrow(all_ri[[1]]) != 0) & (length(all_ri$rs_vec) != 0)){referred_ris2(df,'R','I', paste(all_ri$rs_vec,'ris', sep = '_'))}
all_irn <- referral_selector(df,org_code,'a','i_r_n')
all_irn_result <- if ((nrow(all_irn[[1]]) != 0) & (length(all_irn$rs_vec) != 0)){referred_ris3(df,'R','I','NS', paste(all_irn$rs_vec,'ris', sep = '_'))}
all_sd <- referral_selector(df,org_code,'a','i_r_s')
all_sd_result <- if ((nrow(all_sd[[1]]) != 0) & (length(all_sd$rs_vec) != 0)){referred_ris3(df,'R','I','SDD', paste(all_sd$rs_vec,'ris', sep = '_'))}
all_ns <- referral_selector(df,org_code,'a','ns')
all_ns_result <- if ((nrow(all_ns[[1]]) != 0) & (length(all_ns$rs_vec) != 0)){referred_ris1(df,'NS', paste(all_ns$rs_vec,'ris', sep = '_'))}
all_nsr <- referral_selector(df,org_code,'a','ns_r')
all_nsr_result <- if ((nrow(all_nsr[[1]]) != 0) & (length(all_nsr$rs_vec) != 0)){referred_ris2(df,'R','NS', paste(all_nsr$rs_vec,'ris', sep = '_'))}
all_b <- referral_selector(df,org_code,'b','r')
beta <- df[!is.na(df$beta_lact == '-'), ]
all_b_result <- if ((nrow(all_b[[1]]) != 0) & (length(all_b$rs_vec) != 0)){referred_ris1(df,'R',  paste(all_b$rs_vec,'ris', sep = '_'))}
all_icr <- if (org_code == 'kpn' | org_code == 'sau'){subset(df, induc_cli == '+')}
#bind "refer all" results
all_result <- rbind(lipo_result,all_r_result,all_ri_result,all_irn_result,all_sd_result,all_ns_result,all_nsr_result,all_b_result,all_icr)
#add new column to separate referral days and set RIS value to "R"
all_result$ref_days <- if ((nrow(all_result) != 0) && !is.null(all_result)) {"all"}
all_result$RIS <- if ((nrow(all_result) != 0) && !is.null(all_result)) {"R"}
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if ((nrow(first_r[[1]]) != 0) & (length(first_r$rs_vec) != 0)){referred_ris1(df,'R', paste(first_r$rs_vec,'ris', sep = '_'))}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if ((nrow(first_ri[[1]]) != 0) & (length(first_ri$rs_vec) != 0)){referred_ris2(df,'R','I', paste(first_ri$rs_vec,'ris', sep = '_'))}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if ((nrow(first_sd[[1]]) != 0) & (length(first_sd$rs_vec) != 0)){referred_ris3(df,'R','I','SDD', paste(first_sd$rs_vec,'ris', sep = '_'))}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if ((nrow(first_ns[[1]]) != 0) & (length(first_ns$rs_vec) != 0)){referred_ris1(df,'NS', paste(first_ns$rs_vec,'ris', sep = '_'))}
first_esbl <- if (org_code == 'eco'){referred_esbl(df,df$esbl)}
#Bind "refer first" results
first_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
first_result$ref_days <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"first"}
first_result$RIS <- if ((nrow(first_result) != 0) && !is.null(first_result)) {"R"}
#Bind "refer all and first" results
unusual_result <- rbind(all_result, first_result)
unusual_filename <- paste("Excel/",org_code,"_unusual_list_raw.csv", sep="")
write.csv(unusual_result, file=unusual_filename)
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco[[1]],'eco')
kpn_unusual_result <- unusual_result(df_kpn[[1]],'kpn')
kpn_neo_unusual_result <- unusual_result(df_kpn_neo[[1]],'kpn')
aba_unusual_result <- unusual_result(df_aba[[1]],'aba')
pae_unusual_result <- unusual_result(df_pae[[1]],'pae')
efa_unusual_result <- unusual_result(df_efa[[1]],'efa')
efm_unusual_result <- unusual_result(df_efm[[1]],'efm')
bs_unusual_result <- unusual_result(df_bs[[1]],'bs')
sau_unusual_result <- unusual_result(df_sau[[1]],'sau')
at_cols <- grep("_ris", names(df_pae[[1]]), value = TRUE)
# Check if columns in columns_to_check have all NA values
cols_to_remove <- sapply(at_cols, function(col) {
all(is.na(df_pae[[1]][[col]]))
})
# Create a vector of column names to keep
columns_to_keep <- at_cols[!cols_to_remove]
pan_s_result1 <- pan_s_result %>%
filter(print(across(everything(), ~ !str_detect(., "R"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ !str_detect(., "R"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ !str_detect(., "S"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(if_all(c(columns_to_keep), ~ .x %in% c('S','I')))
pan_s_result1 <- df_pae[[1]] %>%
filter(if_all(c(columns_to_keep), ~ .x %in% c('S')))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ !str_detect(., "S"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ !str_detect(., c("S", "I")))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., c("S", "I")))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "S|I"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "R|I"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "R|S"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(if_all(c(columns_to_keep), ~ .x %in% c('S')))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "S|I"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(across(columns_to_keep, ~ str_detect(., "S|I")))
pan_s_result1 <- df_pae[[1]] %>%
filter(across(columns_to_keep, ~ str_detect(., "S|I")))
pan_s_result1 <- df_pae[[1]] %>%
filter(across(columns_to_keep, ~ str_detect(., "S|I")))
pan_s_result1 <- df_pae[[1]] %>%
filter(across(columns_to_keep, ~ str_detect(., "S|I")))
at_cols <- grep("_ris", names(df_pae[[1]]), value = TRUE)
# Check if columns in columns_to_check have all NA values
cols_to_remove <- sapply(at_cols, function(col) {
all(is.na(df_pae[[1]][[col]]))
})
# Create a vector of column names to keep
columns_to_keep <- at_cols[!cols_to_remove]
pan_s_result1 <- df_pae[[1]] %>%
filter(across(columns_to_keep, ~ str_detect(., "S|I")))
pan_s_result1 <- df_pae[[1]] %>% filter(rowSums(across(columns_to_keep, ~str_detect(., "S|I"))) > 0)
pan_s_result1 <- df_pae[[1]] %>% filter(rowSums(across(columns_to_keep, ~str_detect(., "S|I"))) > 0)
pan_s_result1 <- df_pae[[1]][rowSums(sapply(df_pae[[1]], grepl, pattern = 'S')) == 0, ]
pan_s_result1 <- df_pae[[1]] %>% filter(rowSums(across(everything(), ~ str_detect(., "S"))) > 0)
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "S|I"))))
pan_s_result1 <- df_pae[[1]] %>%
filter(print(across(columns_to_keep, ~ str_detect(., "S|I"))))
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H')
mlst_summary <- data.frame(Species=character(),
MLST=character(),
stringsAsFactors=FALSE)
for(i in mlst_df_list) {
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(wgs_id,MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
mlst_count_summary  <- subset(mlst_count_df , select = c(wgs_id, mlst_count))
mlst_summary_df <- mlst_count_summary %>%
group_by(wgs_id) %>%
mutate(mlst_count = paste0(mlst_count, collapse = ", ")) %>%
distinct()
#assign new name to dataframe
#nam <- paste("mlst", i, sep = "_")
#assign(nam, mlst_summary)
mlst_summary <- rbind(mlst_summary,mlst_summary_df)
#add new data to exisiting dataframe
#mlst_summary[nrow(mlst_summary) + 1,] = c(species, paste0(mlst_count_df$mlst_count, collapse=", "))
}
#Print table
mlst_summary_table <- kable(mlst_summary,align = "l", row.names = FALSE) %>%
kable_styling(position = "left") %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "10cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
footnote(general ="(-) Not identified",
general_title = "Legend: ",
footnote_as_chunk = T, title_format = c("italic"))
print(mlst_summary_table)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
View(`amr_Neisseria gonorrhoeae`)
View(`amr_Neisseria gonorrhoeae`)
View(QC_failed)
View(QC_failed)
if ((nrow(wgs_lowreads) != 0 ) | (nrow(QC_failed) != 0 ) ){
sample_id <- c("24ARS_VSM0001", "24ARS_VSM0093")
action <- c("Repeat testing", "Repeat testing")
reason <- c("QC failure (high contigs & N50 value)", "QC failure (high contigs & N50 value)")
reco_table <- data.frame(sample_id,action, reason)
colnames(reco_table) <- c('Sample ID','Action','Reason')
reco_table %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "4cm") %>%
column_spec(3, width = "6cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
}else{
sample_id <- c("No futher action required for this batch")
action <- c("")
reason <- c("")
reco_table <- data.frame(sample_id,action, reason)
colnames(reco_table) <- c('Sample ID','Action','Reason')
reco_table %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "4cm") %>%
column_spec(3, width = "6cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
}
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
