retain_column <- c('iso_num','sample_id','wgs_id','completeness','contamination','qc_final_coverage','total_contig_length','gc_content','total_contig','assembler_n50_contig_length','qc_final_qual_mean', 'condition_checks')
wgs_summary_df <- subset(wgs_df, select = retain_column)
colnames(wgs_df)
retain_column <- c('iso_num','sample_id','wgs_id','completeness','contamination','final_coverage','total_contig_length','gc_content','total_contig','n50_contig_length','qc_final_qual_mean', 'condition_checks')
wgs_summary_df <- subset(wgs_df, select = retain_column)
View(wgs_summary_df)
# identify the index of columns with false result
wgs_summary_df <- wgs_summary_df %>%
rowwise() %>%
mutate(
# Get column indices of FALSE results
col_index = ifelse(
all(unlist(condition_checks)),
NA_character_,
paste(which(!unlist(condition_checks)), collapse = ",")
)
) %>%
select(-condition_checks)
# round off qc_final_coverage column to one decimal place
#wgs_summary_df$qc_final_coverage <-  format(round(wgs_summary_df$qc_final_coverage, 1), nsmall = 1)
wgs_summary_df$final_coverage <- format(round(unlist(wgs_summary_df$final_coverage), 1), nsmall = 1)
# Create a conversion function to convert Basepairs to MEgabasepairs
bp_to_mb <- function(bp) {
x <- bp / 1e6
x <- format(round(x, 2), nsmall = 2)
x <- paste0(x, " Mb")
return(x)
}
#convert bp to mb
#wgs_summary_df$total_contig_length <- bp_to_mb(wgs_summary_df$total_contig_length)
wgs_summary_df$total_contig_length <- bp_to_mb(unlist(wgs_summary_df$total_contig_length))
summary_table <- function(data) {
# Convert col_index to character if it isn't already
data$col_index <- as.character(data$col_index)
#remove batch name in sample_id
data$sample_id <- sub("^(([^_]+_[^_]+)).*", "\\1", data$sample_id)
# Remove trailing underscore
data$sample_id <- sub("_$", "", data$sample_id)
data$sample_id <- gsub("_", "\\_", data$sample_id, fixed = TRUE)
#data$qc_final_qual_mean <- format(round(data$qc_final_qual_mean, 1), nsmall = 1)
data$qc_final_qual_mean <- format(round(unlist(data$qc_final_qual_mean), 1), nsmall = 1)
data$final_coverage <- format(round(unlist(data$final_coverage), 1), nsmall = 1)
# Create a display copy with all columns as character
display_df <<- data %>%
mutate(across(everything(), as.character)) %>%
rename(`Isolate No.` = iso_num,
`Sample ID` = sample_id,
`WGS ID` = wgs_id,
`completeness` = completeness,
`contamination` = contamination,
`Depth of coverage` = final_coverage,
`Genome size` = total_contig_length,
`GC content` = gc_content,
`Contig count` = total_contig,
`N50` = n50_contig_length,
`Mean read Q-score` = qc_final_qual_mean) %>%
select(-col_index)
# Apply formatting
for (i in 1:nrow(data)) {
if (!is.na(data$col_index[i]) && nzchar(data$col_index[i])) {
# Split and convert to numeric safely
indices <- tryCatch({
as.numeric(trimws(unlist(strsplit(data$col_index[i], ","))))
}, error = function(e) numeric(0))
# Remove any NAs from conversion
indices <- indices[!is.na(indices) & indices > 0]
# Apply formatting to each specified column
for (col in indices) {
# Adjust column index (now accounts for renamed columns)
display_col <- col + 3  # Adjust based on your column structure
if (display_col <= ncol(display_df)) {
# Get original value
original_value <- data[i, display_col]  # Adjust offset as needed
# Apply LaTeX formatting for PDF
display_df[i, display_col] <- paste0("\\textcolor{blue}{\\textbf{",
as.character(original_value), "}}")
}
}
}
}
# Create the table
kable(display_df, format = "latex", booktabs = TRUE, escape = FALSE, align = "c") %>%
kable_styling(latex_options = c("scale_down", "hold_position")) %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
column_spec(3,italic = TRUE) %>%
footnote(general = c("PASS","  |  ",
"\\\\colorbox{Salmon}{FAILURE}","  |  ",
"\\\\textcolor{Blue}{EXCEEDS THRESHOLD METRIC/S}","  |  ",
"(x) - NON-CONCORDANT","  |"),
general_title = "Legend:",
footnote_as_chunk = T, escape = F)
}
summary_table(wgs_summary_df)
class(wgs_summary_df$final_coverage)
View(wgs_summary_df)
summary_table <- function(data) {
# Convert col_index to character if it isn't already
data$col_index <- as.character(data$col_index)
# Convert final_coverage to numeric if it isn't already
data$final_coverage <- as.numeric(data$final_coverage)
#remove batch name in sample_id
data$sample_id <- sub("^(([^_]+_[^_]+)).*", "\\1", data$sample_id)
# Remove trailing underscore
data$sample_id <- sub("_$", "", data$sample_id)
data$sample_id <- gsub("_", "\\_", data$sample_id, fixed = TRUE)
#data$qc_final_qual_mean <- format(round(data$qc_final_qual_mean, 1), nsmall = 1)
data$qc_final_qual_mean <- format(round(unlist(data$qc_final_qual_mean), 1), nsmall = 1)
data$final_coverage <- format(round(unlist(data$final_coverage), 1), nsmall = 1)
# Create a display copy with all columns as character
display_df <<- data %>%
mutate(across(everything(), as.character)) %>%
rename(`Isolate No.` = iso_num,
`Sample ID` = sample_id,
`WGS ID` = wgs_id,
`completeness` = completeness,
`contamination` = contamination,
`Depth of coverage` = final_coverage,
`Genome size` = total_contig_length,
`GC content` = gc_content,
`Contig count` = total_contig,
`N50` = n50_contig_length,
`Mean read Q-score` = qc_final_qual_mean) %>%
select(-col_index)
# Apply formatting
for (i in 1:nrow(data)) {
if (!is.na(data$col_index[i]) && nzchar(data$col_index[i])) {
# Split and convert to numeric safely
indices <- tryCatch({
as.numeric(trimws(unlist(strsplit(data$col_index[i], ","))))
}, error = function(e) numeric(0))
# Remove any NAs from conversion
indices <- indices[!is.na(indices) & indices > 0]
# Apply formatting to each specified column
for (col in indices) {
# Adjust column index (now accounts for renamed columns)
display_col <- col + 3  # Adjust based on your column structure
if (display_col <= ncol(display_df)) {
# Get original value
original_value <- data[i, display_col]  # Adjust offset as needed
# Apply LaTeX formatting for PDF
display_df[i, display_col] <- paste0("\\textcolor{blue}{\\textbf{",
as.character(original_value), "}}")
}
}
}
}
# Create the table
kable(display_df, format = "latex", booktabs = TRUE, escape = FALSE, align = "c") %>%
kable_styling(latex_options = c("scale_down", "hold_position")) %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
column_spec(3,italic = TRUE) %>%
footnote(general = c("PASS","  |  ",
"\\\\colorbox{Salmon}{FAILURE}","  |  ",
"\\\\textcolor{Blue}{EXCEEDS THRESHOLD METRIC/S}","  |  ",
"(x) - NON-CONCORDANT","  |"),
general_title = "Legend:",
footnote_as_chunk = T, escape = F)
}
summary_table(wgs_summary_df)
# create new wgs_summary_table with additional column for result
wgs_summary_result <- wgs_df %>%
select(sample_id, failed_conditions, result) %>%
mutate(
batch_code = batch_code,
result = ifelse(result != TRUE, "Failed", "Passed")
) %>%
relocate(batch_code, .before = sample_id)
# append googlesheet "result" tab
sheet_append(ss = sheet_id, sheet = "result", data = wgs_summary_result)
View(wgs_summary_df)
View(wgs_summary_result)
wgs_qc <- qc_listing_nc
wgs_qc$failed_conditions = wgs_df$failed_conditions[match(paste0(qc_listing_nc$sample_id, "_", batch_name_clean), wgs_df$sample_id)]
reco_df <- wgs_qc %>%
filter(!is.na(failed_conditions)|concordant == FALSE) %>%
select(sample_id, failed_conditions, concordant) %>%
mutate(
remarks = ifelse(concordant != TRUE, "Non-concordant result - Check Label", "For repeat testing")
) %>%
select(-concordant) %>%
group_by(failed_conditions) %>%
summarise(sample_id = paste(sample_id, collapse = ", "),
Remarks = paste(unique(remarks), collapse = "; "),
.groups = 'drop')
# arrange columns
reco_df <- reco_df[, c(2,1,3)]
if (nrow(wgs_lowreads) != 0){
wgs_lowreads_reco <- wgs_lowreads %>%
mutate(
sample_id = sub("^(([^_]+_[^_]+)).*", "\\1", sample_id),
sample_id = sub("_$", "", sample_id),
failed_conditions = "Low read counts",
remarks = "For repeat testing"
) %>%
select(sample_id, failed_conditions, remarks) %>%
group_by(failed_conditions) %>%
summarise(sample_id = paste(sample_id, collapse = ", "),
Remarks = paste(unique(remarks), collapse = "; "),
.groups = 'drop')
reco_df <- rbind(reco_df, wgs_lowreads_reco)
}
if (nrow(reco_df) != 0) {
colnames(reco_df) <- c('Sample ID','Reason - Failed Metrics','Remarks')
reco_table <- reco_df %>%
kable(
format = "latex",
booktabs = TRUE,
escape = TRUE,  # Keep FALSE since you pre-escaped underscores
align = c("l", "c", "c")
) %>%
kable_styling(
position = "left",
latex_options = c("striped", "hold_position")
) %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "6cm") %>%
column_spec(3, width = "4cm") %>%
row_spec(0, background = "#D4D4D4", bold = TRUE)
reco_table
}else{
sample_id <- ""
failed_conditions <- "No further action required for this batch."
Remarks <- ""
reco_df <- data.frame(sample_id,failed_conditions, Remarks)
colnames(reco_df) <- c('Sample ID','Reason - Failed Metrics','Remarks')
reco_table <- reco_df %>%
kable(
format = "latex",
booktabs = TRUE,
escape = TRUE,  # Keep FALSE since you pre-escaped underscores
align = c("l", "c", "c")
) %>%
kable_styling(
position = "left",
latex_options = c("striped", "hold_position")
) %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "6cm") %>%
column_spec(3, width = "4cm") %>%
row_spec(0, background = "#D4D4D4", bold = TRUE)
reco_table
}
View(reco_df)
qc_summary_df <- qc_listing_df %>% filter(!is.na(WGS))  %>% count(WGS)
#change column name and sort
names(qc_summary_df)[names(qc_summary_df) == 'n'] <- 'number'
qc_summary_df <- qc_summary_df[order(-qc_summary_df$number),]
# count not identified WGS result
qc_not_identified <- ifelse(qc_summary_df$WGS == 'Not Identified', qc_summary_df$number,0)
qc_not_identified <- unique(qc_not_identified)
qc_tl <- ifelse(qc_not_identified == 0, nrow(qc_listing_df), nrow(qc_listing_df) - qc_not_identified)
qc_distinct <- ifelse(qc_not_identified == 0, nrow(qc_summary_df), nrow(qc_summary_df) - qc_not_identified)
qc_pass <- nrow(wgs_df[wgs_df$result == TRUE, ])
qc_failed <- nrow(wgs_df[wgs_df$result == FALSE, ])
qc_pass_pc <- if (qc_pass != 0) (qc_pass/qc_tl) * 100 else 0
qc_pass_pc <- format(round(qc_pass_pc, 2), nsmall = 2)
qc_failed_pc <- if (qc_failed != 0) (qc_failed/qc_tl) * 100 else 0
qc_failed_pc <- format(round(qc_failed_pc, 2), nsmall = 2)
qc_concordance <- nrow(qc_listing_nc[qc_listing_nc$concordant == TRUE, ])
qc_cn_pc <- if (qc_concordance != 0) (qc_concordance/qc_tl) * 100 else 0
qc_cn_pc <- format(round(qc_cn_pc, 2), nsmall = 2)
colnames(qc_summary_df) <- c('WGS_ID','Number')
qc_summary_df %>%
kable(booktabs = T, align = "lc", row.names = FALSE)%>%
kable_styling(position = "left") %>%
column_spec(1, width = "8cm", italic = TRUE) %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
# Calculate the counts for each "wgs_id"
wgs_id_count <- table(wgs_df$wgs_id)
# Create a data frame with "wgs_id" and their counts
wgs_count_df <- data.frame(wgs_id = names(wgs_id_count), Frequency = as.vector(wgs_id_count))
# Sort the data frame by the "Frequency" column in descending order
wgs_count_df <- wgs_count_df[order(-wgs_count_df$Frequency),]
# Now, set the factor levels in reverse order for correct sorting
wgs_count_df$wgs_id <- factor(wgs_count_df$wgs_id, levels = rev(wgs_count_df$wgs_id))
ggplot(data = wgs_count_df, aes(x = " ", y = Frequency, fill = wgs_id)) +
geom_col(color = "black") +
theme(legend.text = element_text(size=5)) +
geom_text(aes(label = Frequency),
position = position_stack(vjust = 0.5)) +
xlab("") +
labs(fill="WGS ID") +
coord_polar(theta = "y") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank(),
legend.text = element_text(face = "italic"))
# Define the desired order for the 'result' levels
wgs_df$result_cat <- ifelse(wgs_df$result == TRUE, "PASS", "FAILURE")
desired_order <- c("PASS", "FAILURE")
wgs_df$result_cat <- factor(wgs_df$result_cat, levels = desired_order)
result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879")
ggplot(data = wgs_df, aes(x = org_code, fill = result_cat)) +
geom_bar() +
facet_wrap(~ result_cat) +
coord_flip() +
scale_fill_manual(values = result_colors) + # Apply the defined colors
ylab("Frequency") +
xlab("Organisms") +
guides(fill = FALSE) +  # Hide the legend for the 'result' variable
scale_y_continuous(breaks= pretty_breaks())
#theme_minimal()
# Convert class
wgs_df$total_contig <- as.numeric(unlist(wgs_df$total_contig))
# Create a new variable for color mapping
wgs_df$status <- ifelse(wgs_df$total_contig < 500, "Passed", "Above threshold")
# Plot
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = total_contig, y = org_code, color = status)) +
ylab("Organisms") +
xlab("Number of Contigs") +
scale_color_manual(
values = c("Passed" = "#8ad879", "Above threshold" = "#f3533a"),
labels = c("Passed", "Above threshold")
) +
labs(color = "Contigs")
# Convert class
wgs_df$assembler_n50_contig_length <- as.numeric(unlist(wgs_df$assembler_n50_contig_length))
# Convert class
wgs_df$n50_contig_length <- as.numeric(unlist(wgs_df$n50_contig_length))
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = n50_contig_length, y = org_code, color = ifelse(n50_contig_length > 20000 , "#8ad879", "#f3533a"))) +
ylab("Organisms") +
xlab("N50 Value") +
scale_color_manual(values = c("#8ad879", "#f3533a"), labels = c("Passed", "Above threshold")) +
labs(color = "N50 Result") +
scale_x_continuous(
labels = scales::comma_format(big.mark = ',',
decimal.mark = '.'))
# Convert class
wgs_df$total_contig_length <- as.numeric(unlist(wgs_df$total_contig_length))
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = total_contig_length, y = org_code, color = ifelse(genome_size_result == "passed" , "#8ad879", "#f3533a"))) +
ylab("Organisms") +
xlab("Total length Value") +
scale_color_manual(values = c("#8ad879", "#f3533a"), labels = c("Passed", "Above threshold")) +
labs(color = "Total length result") +
scale_x_continuous(
labels = scales::comma_format(big.mark = ',',
decimal.mark = '.'))
#rename columns
mlst_df_clean <- df_mlst %>%
rename("sample_id" = 1,
"species" = 2,
"MLST" = 3
) %>%
mutate(
sample_id = sub(".*/(.*)\\.fna$", "\\1", sample_id),
sample_id = gsub("-", "_", sample_id)
) %>%
filter(str_detect(sample_id, batch_name_clean))
#drop row without species
mlst_df_clean <- subset(mlst_df_clean, mlst_df_clean$species != '-')
#merge wgs_id from wgs_df to mlst_df to set as species value
wgs_species <- subset(wgs_df, select = c("sample_id", "wgs_id"))
mlst_df_clean <- merge(mlst_df_clean,wgs_species,by = "sample_id")
#remove batch name in sample_id
mlst_df_clean$sample_id <- sub("^(([^_]+_[^_]+)).*", "\\1", mlst_df_clean$sample_id)
# Remove trailing underscore
mlst_df_clean$sample_id <- sub("_$", "", mlst_df_clean$sample_id)
#reorder column
mlst_df_clean <- mlst_df_clean %>%
relocate(wgs_id, .after = species)
#identify salmonella enterica group
mlst_df_clean$species <- ifelse(mlst_df_clean$wgs_id == 'Salmonella enterica', 'salmonella_enterica', ifelse(mlst_df_clean$wgs_id == 'Salmonella typhoidal','salmonella_typhoidal', mlst_df_clean$species))
#not identified sample
#mlst_df_clean[is.na(mlst_df_clean)] <- 'Not Identified'
#list unique species in the dataframe
species_list <- unique(mlst_df_clean$species)
mlst_df_list = c()
#create multiple dataframe for each species
for(i in species_list) {
#retain first four columns
mlst_info_df <- subset(mlst_df_clean, select = 1:4)
#remove demogs column
mlst_result_df <- subset(mlst_df_clean, , select = -c(1, 2, 3,4))
#use first row data as column names in r
colnames(mlst_result_df)=mlst_result_df[c(1),]
#remove special characters and number from column header
colnames(mlst_result_df) <- gsub("\\s*\\(.*", "", colnames(mlst_result_df))
# Apply gsub to get text inside the parenthesis
mlst_result_df <- apply(mlst_result_df, 2, function(x) gsub("\\(([^()]*)\\)|.", "\\1", x, perl=T))
#remove rows with na value
mlst_result_df <- mlst_result_df[ , colSums(is.na(mlst_result_df))==0]
# Convert back to data frame
mlst_result_df <- as.data.frame(mlst_result_df)
#combine the two dataframe
mlst_result_df <- cbind(mlst_info_df,mlst_result_df)
#assign new name to dataframe
nam <- paste("df", i, sep = "_")
assign(nam, mlst_result_df[mlst_result_df$species==i,])
mlst_df_list <- c(mlst_df_list, nam)
}
View(assembly_sub_df)
View(df_koxytoca)
sheet_id <- "1rOFp9VHXeAfghFU6aOOBeBSt9Q1RC5WVAdLez4HHLU4"
# Read the sheet
df_batch <- read_sheet(sheet_id, sheet = "batch")
df_qualifyr <- read_sheet(sheet_id, sheet = "qualifyr")
df_gambit <- read_sheet(sheet_id, sheet = "gambit")
df_bactopia <- read_sheet(sheet_id, sheet = "bactopia-report")
df_assembly <- read_sheet(sheet_id, sheet = "assembly-scan")
df_checkm2 <- read_sheet(sheet_id, sheet = "checkm2")
df_mlst <- read_sheet(sheet_id, sheet = "mlst")
df_amrfinderplus <- read_sheet(sheet_id, sheet = "amrfinderplus")
# enter batch code
batch_code <- dlgInput("Enter Batch Code:", Sys.info()[" "])$res
#filter batch df
batch_df <- df_batch[df_batch$batch_code == batch_code, ]
sample_name <- batch_df$sample_name
sample_name <- gsub("-", "_", sample_name, fixed=TRUE)
#remove batch number from sample_name
sample_name_clean <- sub("(_[0-9]+.*)$", "", sample_name)
#merge qualifyr, gambit,checkm2 and bactopia results
#rename column
colnames(df_gambit)[which(names(df_gambit) == "query")] <- "name"
colnames(df_assembly)[which(names(df_assembly) == "sample")] <- "name"
colnames(df_bactopia)[which(names(df_bactopia) == "sample")] <- "name"
#checkm2 column names to lower
names(df_checkm2) <- tolower(names(df_checkm2))
#remove ".fna"
df_checkm2$name <- gsub(".fna", "", df_checkm2$name, fixed=TRUE)
# Get species name
df_gambit$species <- ifelse(df_gambit$predicted.rank == "species", df_gambit$predicted.name, df_gambit$next.name)
# Compute total GC Content
df_assembly$gc_content <- as.numeric(df_assembly$contig_percent_g) + as.numeric(df_assembly$contig_percent_c)
# Subset Columns per dataframe
gambit_sub_df <- subset(df_gambit, select = c(name, species))
checkm2_sub_df <- subset(df_checkm2, select = c(name, completeness, contamination))
assembly_sub_df <- subset(df_assembly, select = c(name, total_contig, total_contig_length, gc_content, n50_contig_length))
bactopia_sub_df <- subset(df_bactopia, select = c(name, qc_original_total_bp, qc_final_qual_mean))
# put all data frames into list
df_list <- list(gambit_sub_df, checkm2_sub_df, assembly_sub_df, bactopia_sub_df)
# merge all data frames in list
wgs_df <- df_list %>% reduce(full_join, by='name')
wgs_df$name <- gsub("-", "_", wgs_df$name, fixed=TRUE)
wgs_df$name <- toupper(wgs_df$name)
#filter wgs_df based on sample_name
wgs_df <- wgs_df[wgs_df$name %in% sample_name, ]
#get samplesheet file
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
# Apply the function to the column of strings
wgs_df <- wgs_df %>% rename(sample_id = name)
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_df[['sample_id']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_df$sample_id <- gsub("STC", "STC_", wgs_df$sample_id, fixed=TRUE)
}
referred_df <- read_xlsx("data_files/Combined Data on Referred Isolates_06.25.25.xlsx", sheet="ARSRL")
referred_df <- subset(referred_df, select = c(accession_no,arsrl_org))
result <- referred_df[referred_df$accession_no %in% sample_name_clean, ]
colnames(result) <- c('sample_id','arsrl_org')
# Returns string without leading or trailing white space
result$arsrl_org <- gsub("^\\s+|\\s+$", "", result$arsrl_org)
#check if arsrl_result_df is exisiting
if (!exists("arsrl_result_df")) {
arsrl_result_df <- result
}
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_id = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_id = sample_id, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_id,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_id,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#manually add result for STC
if(stc_sample_count !=0){
stc_df <- read_xlsx("data_files/ARSRL_SatScan_Results.xlsx")
stc_df <- stc_df[stc_df$sample_id %in% stc_sample, ]
stc_df$sample_id <- gsub("STC", "STC_", stc_df$sample_id, fixed=TRUE)
arsrl_result_df <- rbind(arsrl_result_df,stc_df)
}
#Check if QC_BBR sample is present in the id list
bbr_sample <- grep("QC_BBR", wgs_df[['sample_id']], value = TRUE)
bbr_sample_count <- length(bbr_sample)
#manually add result for QC_BBR
if(bbr_sample_count !=0){
sample_id = bbr_sample
arsrl_org = "Bordetella bronchiseptica"
arsrl_result_df <- arsrl_result_df %>%
add_row(sample_id = sample_id, arsrl_org=arsrl_org)
}
#Check if QC_BBR sample is present in the id list
vc_sample <- grep("VC", wgs_df[['sample_id']], value = TRUE)
vc_sample_count <- length(vc_sample)
#manually add result for QC_BBR
if(vc_sample_count !=0){
sample_id = vc_sample
arsrl_org = "Neisseria gonorrhoeae"
arsrl_result_df <- arsrl_result_df %>%
add_row(sample_id = sample_id, arsrl_org=arsrl_org)
}
wgs_df1 <- wgs_df
#wgs_df <- wgs_df1
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver6.Rmd",
output_file = paste("qualifyr_report_",batch_code, '.pdf', sep='')
)
}else{
cat("No file found")
}
gc()
