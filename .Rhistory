x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_samplesheet <- wgs_samplesheet %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore)) %>%
mutate(sample_id = sapply(sample_id, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_samplesheet[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_samplesheet$sample_name <- gsub("STC", "STC_", wgs_samplesheet$sample_name, fixed=TRUE)
wgs_samplesheet$sample_id <- gsub("STC", "STC_", wgs_samplesheet$sample_id, fixed=TRUE)
}
#Get experiment name
WGS_exp_name <- unique(wgs_samplesheet[['experiment name']])
View(wgs_samplesheet)
View(wgs_warning_df)
#filter dataframe based on the sample_id present in the WGS dataframe
wgs_samplesheet_good <- wgs_samplesheet[wgs_samplesheet$sample_id %in% id_list, ]
wgs_samplesheet_good <- subset(wgs_samplesheet_good, select = c('sample_id','description'))
wgs_df <- merge(unique(wgs_df), unique(wgs_samplesheet_good), by = "sample_id", all.x= TRUE)
#arsrl_result_df$sample_id <- gsub("_", "\\_", arsrl_result_df$sample_id, fixed=TRUE)
#wgs_df$sample_id <- gsub("_", "\\_", wgs_df$sample_id, fixed=TRUE)
retain_column <- c('iso_num','sample_id','wgs_id','description')
wgs_result_df <- subset(wgs_df, select = retain_column)
#qc_listing_df <- merge(x=arsrl_result_df,y=wgs_result_df, by="sample_id", all.x=TRUE)
qc_listing_df <- merge(unique(arsrl_result_df), unique(wgs_result_df), by = "sample_id", all.x= TRUE)
# Define a function to get the part before the first white space
get_value_before_whitespace <- function(x) {
parts <- strsplit(as.character(x), " ")[[1]]
return(parts[1])
}
# Apply the function to the specified column
qc_listing_df$Genus <- sapply(qc_listing_df$arsrl_org, get_value_before_whitespace)
qc_listing_nc <- qc_listing_df %>%
rowwise() %>%
mutate(concordant =
grepl(Genus, wgs_id)
)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
nc_warning <- ifelse(qc_listing_nc$concordant == TRUE,"white","yellow")
qc_listing_df = subset(qc_listing_df, select = -c(Genus) )
#qc_listing_df$iso_num <- seq.int(nrow(qc_listing_df))
colnames(qc_listing_df) <- c('Sample ID','ARSRL','Isolate No.','WGS','Description')
qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
qc_listing_df %>%
kable(booktabs = T, align = "c", escape = FALSE)%>%
column_spec(1, width = "1cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3, width = "1.5cm") %>%
column_spec(4, width = "5.25cm") %>%
column_spec(5, width = "5.25cm", background = nc_warning) %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
View(wgs_df)
lgd1 <- c("PASS")
lgd2 <- c("WARNING")
lgd3 <- c("FAILURE")
lgd4 <- c("EXCEEDS THRESHOLD METRIC/S")
lgd5 <- c("NON-CONCORDANT")
legend_tbl <- data.frame(lgd1,lgd2,lgd3,lgd4,lgd5)
kable(legend_tbl,  "latex", booktabs = T, col.names = NULL, align = "c") %>%
kable_styling(position = "left",font_size = 4) %>%
column_spec(1, width = "1cm",border_left = TRUE,background = "white")%>%
column_spec(2, width = "1cm",border_left = TRUE, background = "#FFA77F")%>%
column_spec(3, width = "1cm",border_left = TRUE, background = "#FD7979")%>%
column_spec(4, width = "3cm",border_left = TRUE,color = "blue")%>%
column_spec(5, width = "2cm",background = "yellow",border_left = TRUE, border_right =  TRUE) %>%
sub("\\\\toprule", "", .) %>%
sub("\\\\bottomrule", "", .)
#filter dataframe based on the sample_id not present in the WGS samplesheet
wgs_lowreads <- wgs_samplesheet[!(wgs_samplesheet[['sample_id']] %in% id_list), ]
wgs_lowreads <- subset(wgs_lowreads, select = c('sample_id','description', 'index reads'))
if (nrow(wgs_lowreads != 0)){
wgs_lowreads$remarks <- c("low read count")
colnames(wgs_lowreads) <- c('Sample ID','Description','Index reads','Remarks')
kable(wgs_lowreads,  "latex", booktabs = T, align = "c") %>%
kable_styling(position = "left") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "2cm") %>%
column_spec(4, width = "7cm") %>%
add_header_above(c("Sample excluded in the analysis" = 4), align = "l", bold = TRUE) %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
}
View(wgs_lowreads)
retain_column <- c('iso_num','sample_id','contamination_value','no_of_contigs_value','gc_percent_value','n50_value','total_length_value')
wgs_summary_df <- subset(wgs_df, select = retain_column)
wgs_summary_df$sample_id <- ifelse(wgs_df$warning_count == 1,paste("*",wgs_df$sample_id),wgs_df$sample_id)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
contamination_warning <- ifelse(wgs_df$contamination_result == 'FAILURE', "blue",ifelse(wgs_df$contamination_result == 'WARNING', "blue","black"))
contigs_warning <- ifelse(wgs_df$no_of_contigs_result == 'FAILURE', "blue",ifelse(wgs_df$no_of_contigs_result == 'WARNING', "blue","black"))
n50_warning <- ifelse(wgs_df$n50_result == 'FAILURE', "blue",ifelse(wgs_df$n50_result == 'WARNING',"blue","black"))
colnames(wgs_summary_df) <- c('Isolate No.','Sample ID','Contamination','Contigs', 'GC Percent','N50','Total Length')
wgs_summary_df %>%
kable(booktabs = T, align = "c", escape = FALSE) %>%
column_spec(1, width = "1cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "2cm", color = contamination_warning) %>%
column_spec(4, width = "2cm", color = contigs_warning) %>%
column_spec(5, width = "2cm") %>%
column_spec(6, width = "2cm", color = n50_warning) %>%
column_spec(7, width = "2cm") %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
#write.csv(wgs_df, file="wgs_qc_data.csv")
warning_value <- unique(wgs_warning_df$warning_count)
warning_value <- ifelse(length(warning_value)==0,0,warning_value)
lgd1 <- c("PASS")
lgd2 <- c("WARNING")
lgd3 <- c("FAILURE")
lgd4 <- c("EXCEEDS THRESHOLD METRIC/S")
lgd5_value <- ifelse(warning_value == 1,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector.",ifelse(warning_value == 2,"*Isolates were tagged with warning due to uncertain results of sequence identification levels.",ifelse(warning_value == 3,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector and sequence identification levels.","*Isolates were tagged with warning due to uncertain results  of species identification using bactinspector or sequence identification levels.")))
lgd5 <- lgd5_value
#lgd4 <- c("*Isolates were tagged with warning due to uncertain results of species identification using bactinspector")
legend_tbl2 <- data.frame(lgd1,lgd2,lgd3,lgd4,lgd5)
kable(legend_tbl2,  "latex", booktabs = T, col.names = NULL, align = "c") %>%
kable_styling(position = "left",font_size = 4) %>%
column_spec(1, width = "1cm",border_left = TRUE,background = "white")%>%
column_spec(2, width = "1cm",border_left = TRUE, background = "#FFA77F")%>%
column_spec(3, width = "1cm",border_left = TRUE, background = "#FD7979")%>%
column_spec(4, width = "2.5cm",border_left = TRUE,color = "blue")%>%
column_spec(5, width = "8cm",border_left = TRUE, border_right =  TRUE)%>%
sub("\\\\toprule", "", .) %>%
sub("\\\\bottomrule", "", .)
#write.csv(wgs_df, file="wgs_qc_data.csv")
warning_value <- unique(wgs_warning_df$warning_count)
warning_value <- ifelse(length(warning_value)==0,0,warning_value)
lgd1 <- c("PASS")
lgd2 <- c("WARNING")
lgd3 <- c("FAILURE")
lgd4 <- c("EXCEEDS THRESHOLD METRIC/S")
lgd5_value <- ifelse(warning_value == 1,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector.",ifelse(warning_value == 2,"*Isolates were tagged with warning due to uncertain results of sequence identification levels.",ifelse(warning_value == 3,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector and sequence identification levels.","*Isolates were tagged with warning due to uncertain results  of species identification using bactinspector or sequence identification levels.")))
lgd5 <- lgd5_value
#lgd4 <- c("*Isolates were tagged with warning due to uncertain results of species identification using bactinspector")
legend_tbl2 <- data.frame(lgd1,lgd2,lgd3,lgd4,lgd5)
kable(legend_tbl2,  "latex", booktabs = T, col.names = NULL, align = "c") %>%
kable_styling(position = "left",font_size = 4) %>%
column_spec(1, width = "1cm",border_left = TRUE,background = "white")%>%
column_spec(2, width = "1cm",border_left = TRUE, background = "#FFA77F")%>%
column_spec(3, width = "1cm",border_left = TRUE, background = "#FD7979")%>%
column_spec(4, width = "2.5cm",border_left = TRUE,color = "blue")%>%
column_spec(5, width = "8cm",border_left = TRUE, border_right =  TRUE)%>%
sub("\\\\toprule", "", .) %>%
sub("\\\\bottomrule", "", .)
#write.csv(wgs_df, file="wgs_qc_data.csv")
View(wgs_warning_df)
warning_summary_df <- wgs_warning_df
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
View(warning_summary_df)
View(wgs_warning_df)
View(wgs_lowreads)
View(wgs_result_df)
View(wgs_df)
View(warning_summary_df)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_df[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_df$sample_name <- gsub("STC", "STC_", wgs_df$sample_name, fixed=TRUE)
}
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#manually add result for STC
if(stc_sample_count !=0){
sample_name = stc_sample
sample_name <- gsub("STC", "STC_", sample_name, fixed=TRUE)
arsrl_org = "Pseudomonas aeruginosa"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.pos = 'H')
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
org_df <- read_xlsx("data_files/ORGLIST.xlsx")
org_df <- subset(org_df, select = c(ORG,ORGANISM))
result_df <- org_df %>%
right_join(wgs_df, by= c('ORGANISM' = 'wgs_id'))
result_df <- subset(result_df, select = c('ORG', 'sample_id'))
wgs_df <- merge(unique(wgs_df), unique(result_df), by = "sample_id", all.x= TRUE)
wgs_df$iso_num <- seq.int(nrow(wgs_df))
wgs_df$ORG[grepl("Salmonella",wgs_df$wgs_id)] = "sal"
wgs_df$ORG[grepl("Shigella",wgs_df$wgs_id)] = "shi"
wgs_df$ORG[grepl("Vibrio",wgs_df$wgs_id)] = "vic"
wgs_df$warning_count <- ifelse(wgs_df$result == 'WARNING',1,
ifelse(wgs_df$dups_result == 'WARNING',2,
ifelse(wgs_df$result == 'WARNING' & wgs_df$dups_result == 'WARNING',3,0)))
wgs_warning_df <- filter(wgs_df, warning_count!=0 )
wgs_samplesheet <- read_xlsx(paste("data_files/",get_samplesheet,".xlsx", sep=""), sheet = "Modified")
names(wgs_samplesheet) <- tolower(names(wgs_samplesheet))
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_samplesheet <- wgs_samplesheet %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore)) %>%
mutate(sample_id = sapply(sample_id, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_samplesheet[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_samplesheet$sample_name <- gsub("STC", "STC_", wgs_samplesheet$sample_name, fixed=TRUE)
wgs_samplesheet$sample_id <- gsub("STC", "STC_", wgs_samplesheet$sample_id, fixed=TRUE)
}
#Get experiment name
WGS_exp_name <- unique(wgs_samplesheet[['experiment name']])
View(wgs_warning_df)
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
View(wgs_warning_df)
View(wgs_df)
View(QC_failed)
View(qc_listing_df)
View(wgs_warning_df)
View(warning_summary_df)
View(wgs_warning_df)
View(wgs_df)
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
View(warning_summary_df)
View(warning_summary_df)
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
X <- ncol(warning_summary_df)
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = x), align = "l", bold = TRUE)
}
X <- ncol(warning_summary_df)
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = x), align = "l", bold = TRUE)
}
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
#add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
}
#warning_summary_df <- wgs_warning_df
warning_summary_df <-  subset(wgs_df, result == "WARNING")
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE, row.names = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c") %>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
source("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc/get_WGS_file.R", echo=TRUE)
