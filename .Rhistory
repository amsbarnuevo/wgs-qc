column_spec(1, width = "1cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3, width = "1.5cm") %>%
column_spec(4, width = "5.25cm") %>%
column_spec(5, width = "5.25cm", background = nc_warning) %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
lgd1 <- c("PASS")
lgd2 <- c("WARNING")
lgd3 <- c("FAILURE")
lgd4 <- c("EXCEEDS THRESHOLD METRIC/S")
lgd5 <- c("NON-CONCORDANT")
legend_tbl <- data.frame(lgd1,lgd2,lgd3,lgd4,lgd5)
kable(legend_tbl,  "latex", booktabs = T, col.names = NULL, align = "c") %>%
kable_styling(position = "left",font_size = 4) %>%
column_spec(1, width = "1cm",border_left = TRUE,background = "white")%>%
column_spec(2, width = "1cm",border_left = TRUE, background = "#FFA77F")%>%
column_spec(3, width = "1cm",border_left = TRUE, background = "#FD7979")%>%
column_spec(4, width = "3cm",border_left = TRUE,color = "blue")%>%
column_spec(5, width = "2cm",background = "yellow",border_left = TRUE, border_right =  TRUE) %>%
sub("\\\\toprule", "", .) %>%
sub("\\\\bottomrule", "", .)
#filter dataframe based on the sample_id not present in the WGS samplesheet
wgs_lowreads <- wgs_samplesheet[!(wgs_samplesheet[['sample_id']] %in% id_list), ]
wgs_lowreads <- subset(wgs_lowreads, select = c('sample_id','description', 'index reads'))
if (nrow(wgs_lowreads != 0)){
wgs_lowreads$remarks <- c("low read count")
colnames(wgs_lowreads) <- c('Sample ID','Description','Index reads','Remarks')
kable(wgs_lowreads,  "latex", booktabs = T, align = "c") %>%
kable_styling(position = "left") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "2cm") %>%
column_spec(4, width = "7cm") %>%
add_header_above(c("Sample excluded in the analysis" = 4), align = "l", bold = TRUE) %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
}
retain_column <- c('iso_num','sample_id','contamination_value','no_of_contigs_value','gc_percent_value','n50_value','total_length_value')
wgs_summary_df <- subset(wgs_df, select = retain_column)
wgs_summary_df$sample_id <- ifelse(wgs_df$warning_count == 1,paste("*",wgs_df$sample_id),wgs_df$sample_id)
warning_color <- which(wgs_df$result == 'WARNING')
failure_color <- which(wgs_df$result == 'FAILURE')
contamination_warning <- ifelse(wgs_df$contamination_result == 'FAILURE', "blue",ifelse(wgs_df$contamination_result == 'WARNING', "blue","black"))
contigs_warning <- ifelse(wgs_df$no_of_contigs_result == 'FAILURE', "blue",ifelse(wgs_df$no_of_contigs_result == 'WARNING', "blue","black"))
n50_warning <- ifelse(wgs_df$n50_result == 'FAILURE', "blue",ifelse(wgs_df$n50_result == 'WARNING',"blue","black"))
colnames(wgs_summary_df) <- c('Isolate No.','Sample ID','Contamination','Contigs', 'GC Percent','N50','Total Length')
wgs_summary_df %>%
kable(booktabs = T, align = "c", escape = FALSE) %>%
column_spec(1, width = "1cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "2cm", color = contamination_warning) %>%
column_spec(4, width = "2cm", color = contigs_warning) %>%
column_spec(5, width = "2cm") %>%
column_spec(6, width = "2cm", color = n50_warning) %>%
column_spec(7, width = "2cm") %>%
row_spec(warning_color, background = "#FFA77F") %>%
row_spec(failure_color, background = "#FD7979") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")
#write.csv(wgs_df, file="wgs_qc_data.csv")
warning_value <- unique(wgs_warning_df$warning_count)
warning_value <- ifelse(length(warning_value)==0,0,warning_value)
lgd1 <- c("PASS")
lgd2 <- c("WARNING")
lgd3 <- c("FAILURE")
lgd4 <- c("EXCEEDS THRESHOLD METRIC/S")
lgd5_value <- ifelse(warning_value == 1,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector.",ifelse(warning_value == 2,"*Isolates were tagged with warning due to uncertain results of sequence identification levels.",ifelse(warning_value == 3,"*Isolates were tagged with warning due to uncertain results of species identification using bactinspector and sequence identification levels.","*Isolates were tagged with warning due to uncertain results  of species identification using bactinspector or sequence identification levels.")))
lgd5 <- lgd5_value
#lgd4 <- c("*Isolates were tagged with warning due to uncertain results of species identification using bactinspector")
legend_tbl2 <- data.frame(lgd1,lgd2,lgd3,lgd4,lgd5)
kable(legend_tbl2,  "latex", booktabs = T, col.names = NULL, align = "c") %>%
kable_styling(position = "left",font_size = 4) %>%
column_spec(1, width = "1cm",border_left = TRUE,background = "white")%>%
column_spec(2, width = "1cm",border_left = TRUE, background = "#FFA77F")%>%
column_spec(3, width = "1cm",border_left = TRUE, background = "#FD7979")%>%
column_spec(4, width = "2.5cm",border_left = TRUE,color = "blue")%>%
column_spec(5, width = "8cm",border_left = TRUE, border_right =  TRUE)%>%
sub("\\\\toprule", "", .) %>%
sub("\\\\bottomrule", "", .)
#write.csv(wgs_df, file="wgs_qc_data.csv")
warning_summary_df <- wgs_warning_df
#remove some columns in the dataframe
warning_summary_df <- subset(warning_summary_df, select = -c(result, check_result, contamination_value, contamination_result,no_of_contigs_value,no_of_contigs_result,gc_percent_value,gc_percent_result,n50_value,n50_result,total_length_value,total_length_result))
#For each row, get column names where data is equal to a certain value
indx <- which(warning_summary_df=='WARNING', arr.ind=TRUE)
val <- tapply(names(warning_summary_df)[indx[,2]], indx[,1], FUN=toString)
warning_summary_df$cols_warning <- ifelse(seq_len(nrow(warning_summary_df)) %in% names(val), val, NA)
#retain only sample_id and cols_warning
warning_summary_df <- subset(warning_summary_df, select = c('iso_num','sample_id', 'cols_warning'))
#qc_listing_df <- qc_listing_df[, c(3,1,5,2,4)]
if (nrow(warning_summary_df !=0)){
colnames(warning_summary_df) <- c('Isolate No.','Sample ID','Value with warning/s')
warning_summary_df %>%
kable(booktabs = T, align = "cl", escape = FALSE) %>%
kable_styling(latex_options = "striped") %>%
column_spec(1, width = "2cm") %>%
column_spec(2, width = "3cm") %>%
column_spec(3, width = "11cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE,align = "c")%>%
add_header_above(c("With Warning/s" = 3), align = "l", bold = TRUE)
}
wgs_df$sample_id <- gsub("\\_", "_", wgs_df$sample_id, fixed=TRUE)
QC_failed <- wgs_df %>%
filter(result == "FAILURE") %>%
select(sample_id,  result, contamination_result, no_of_contigs_value, n50_value, total_length_value)
if (nrow(QC_failed) > 0) {
colnames(QC_failed) <- c('Sample ID','Result','Contamination','Contigs','N50','Total Length')
QC_failed %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)  %>%
add_header_above(c("List of samples above/below QC threshold metrics" = 6), align = "l", bold = TRUE)
} else {
sample_id <- c("")
remarks <- c("No QC failures found.")
QC_failed <- data.frame(sample_id,remarks)
colnames(QC_failed) <- c('Sample ID','Remarks')
QC_failed %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "12cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)  %>%
add_header_above(c("List of samples above/below QC threshold metrics" = 2), align = "l", bold = TRUE)
}
qc_summary_df <- qc_listing_df %>% group_by(WGS) %>% summarise(number = sum(!is.na(WGS)))
qc_summary_df <- qc_summary_df[order(-qc_summary_df$number),]
qc_tl <- nrow(qc_listing_df)
qc_distinct <- nrow(qc_summary_df)
qc_pass <- nrow(wgs_df[wgs_df$result == 'PASS', ])
qc_warning <- nrow(wgs_df[wgs_df$result == 'WARNING', ])
qc_pass_pc <- if (qc_pass != 0) (qc_pass/qc_tl) * 100 else 0
qc_pass_pc <- format(round(qc_pass_pc, 2), nsmall = 2)
qc_warning_pc <- if (qc_warning != 0) (qc_warning/qc_tl) * 100 else 0
qc_warning_pc <- format(round(qc_warning_pc, 2), nsmall = 2)
qc_concordance <- nrow(qc_listing_nc[qc_listing_nc$concordant == TRUE, ])
qc_cn_pc <- if (qc_concordance != 0) (qc_concordance/qc_tl) * 100 else 0
qc_cn_pc <- format(round(qc_cn_pc, 2), nsmall = 2)
colnames(qc_summary_df) <- c('WGS_ID','Number')
qc_summary_df %>%
kable(booktabs = T, align = "lc")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "8cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
# Calculate the counts for each "wgs_id"
wgs_id_count <- table(wgs_df$wgs_id)
# Create a data frame with "wgs_id" and their counts
wgs_count_df <- data.frame(wgs_id = names(wgs_id_count), Frequency = as.vector(wgs_id_count))
# Sort the data frame by the "Frequency" column in descending order
wgs_count_df <- wgs_count_df[order(-wgs_count_df$Frequency),]
# Now, set the factor levels in reverse order for correct sorting
wgs_count_df$wgs_id <- factor(wgs_count_df$wgs_id, levels = rev(wgs_count_df$wgs_id))
ggplot(data = wgs_count_df, aes(x = " ", y = Frequency, fill = wgs_id)) +
geom_col(color = "black") +
theme(legend.text = element_text(size=5)) +
geom_text(aes(label = Frequency),
position = position_stack(vjust = 0.5)) +
xlab("") +
labs(fill="WGS ID") +
coord_polar(theta = "y") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank())
# Define the desired order for the 'result' levels
desired_order <- c("PASS", "WARNING", "FAILURE")
wgs_df$result <- factor(wgs_df$result, levels = desired_order)
result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")
ggplot(data = wgs_df, aes(x = ORG, fill = result)) +
geom_bar() +
facet_wrap(~ result) +
coord_flip() +
scale_fill_manual(values = result_colors) + # Apply the defined colors
ylab("Frequency") +
xlab("Organisms") +
guides(fill = FALSE) #+  # Hide the legend for the 'result' variable
#theme_minimal()
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = no_of_contigs_value, y = ORG, color = ifelse(no_of_contigs_value < 301, "#8ad879", "#f3533a"))) +
ylab("Organisms") +
xlab("Number of Contigs") +
scale_color_manual(values = c("#8ad879", "#f3533a"), labels = c("Passed", "Above threshold")) +
labs(color = "Contigs")
#theme_minimal()
n50_result_count <- wgs_df %>%
count(n50_result)
result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = n50_value, y = ORG, color = ifelse(n50_result == "PASS", "#8ad879", ifelse(n50_result == "WARNING", "#fa9f42", "#f3533a")))) +
scale_color_manual(values = c("#8ad879", "#fa9f42","#f3533a"), labels = c("Passed", "Warning", "Failed")) +
labs(color = "N50 Result") +
xlab("N50 Value") +
ylab("Organisms") +
scale_x_continuous(
labels = scales::comma_format(big.mark = ',',
decimal.mark = '.'))
length_result_count <- wgs_df %>%
count(total_length_result)
result_colors <- c("FAILURE" = "#f3533a", "PASS" = "#8ad879", "WARNING" = "#fa9f42")
ggplot(data = wgs_df) +
geom_point(mapping = aes(x = total_length_value, y = ORG, color = ifelse(total_length_result == "PASS", "#8ad879", ifelse(total_length_result == "WARNING", "#fa9f42", "#f3533a")))) +
scale_color_manual(values = c("#8ad879", "#fa9f42","#f3533a"), labels = c("Passed", "Warning", "Failed")) +
labs(color = "Total length result") +
xlab("Total length Value") +
ylab("Organisms") +
scale_x_continuous(
labels = scales::comma_format(big.mark = ',',
decimal.mark = '.'))
if (nrow(wgs_lowreads) != 0 ){
sample_id <- c("24ARS_NKI0054")
action <- c("For repeat sequencing")
reason <- c("QC failure (high contigs and low N50)")
reco_table <- data.frame(sample_id,action, reason)
colnames(reco_table) <- c('Sample ID','Action','Reason')
reco_table %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "4cm") %>%
column_spec(3, width = "6cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
}else{
sample_id <- c("No futher action required for this batch")
action <- c("")
reason <- c("")
reco_table <- data.frame(sample_id,action, reason)
colnames(reco_table) <- c('Sample ID','Action','Reason')
reco_table %>%
kable(booktabs = T, align = "c")%>%
kable_styling(position = "left") %>%
column_spec(1, width = "6cm") %>%
column_spec(2, width = "4cm") %>%
column_spec(3, width = "6cm") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)
}
#Remain Data column
mlst_df_clean <- mlst_df %>%
rename("sample_id" = 1,
"species" = 2,
"MLST" = 3)
#drop row without species
mlst_df_clean <- subset(mlst_df_clean, mlst_df_clean$species != '-')
#extract text before the first period in sample_id column
mlst_df_clean$sample_id <- sub("\\..*", "", mlst_df_clean$sample_id)
#change "-" to "_" in sample_id column
mlst_df_clean$sample_id <- gsub("-", "_", mlst_df_clean$sample_id, fixed=TRUE)
#merge wgs_id from wgs_df to mlst_df to set as species value
wgs_species <- subset(wgs_df, , select = c("sample_id", "wgs_id"))
mlst_df_clean <- merge(mlst_df_clean,wgs_species,by = "sample_id")
#reorder column
mlst_df_clean <- mlst_df_clean %>%
relocate(wgs_id, .after = species)
#list unique species in the dataframe
species_list <- unique(mlst_df_clean$species)
mlst_df_list = c()
#create multiple dataframe for each species
for(i in species_list) {
#retain first three columns
mlst_info_df <- subset(mlst_df_clean, select = 1:4)
#remove first three columns
mlst_result_df <- subset(mlst_df_clean, , select = -c(1, 2, 3,4))
#use first row data as column names in r
colnames(mlst_result_df)=mlst_result_df[c(1),]
#remove special characters and number from column header
colnames(mlst_result_df) <- gsub("\\s*\\(.*", "", colnames(mlst_result_df))
# Apply gsub to get text inside the parenthesis
mlst_result_df <- apply(mlst_result_df, 2, function(x) gsub("\\(([^()]*)\\)|.", "\\1", x, perl=T))
# Convert back to data frame
mlst_result_df <- as.data.frame(mlst_result_df)
#combine the two dataframe
mlst_result_df <- cbind(mlst_info_df,mlst_result_df)
#assign new name to dataframe
nam <- paste("df", i, sep = "_")
assign(nam, mlst_result_df[mlst_result_df$species==i,])
mlst_df_list <- c(mlst_df_list, nam)
}
for(i in mlst_df_list) {
df <- get(i)
df <- subset(df, select = -c(species) )
names(df)[names(df) == 'wgs_id'] <- 'species'
#kable(df,  "latex", booktabs = T, align = "c") %>%
#kable_styling(position = "left") %>%
#row_spec(0, background = "#D4D4D4",bold = TRUE)
mlst_table <- kable(df,align = "c", row.names = FALSE) %>%
kable_styling(latex_options = c("hold_position","scale_down"), position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE)%>%
column_spec(1:2, width = "3cm") %>%
column_spec(3:9, width = "1cm") %>%
print(mlst_table)
cat("\\vspace{1em}")
}
mlst_summary <- data.frame(Species=character(),
MLST=character(),
stringsAsFactors=FALSE)
for(i in mlst_df_list) {
if (length(mlst_df_list) >1){
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
#add new data to exisiting dataframe
mlst_summary[nrow(mlst_summary) + 1,] = c(species, paste0(mlst_count_df$mlst_count, collapse=","))
}else{
df <- get(i)
#get unique species value
species <- unique(df1$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df1 %>% group_by(wgs_id,MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
mlst_count_summary  <- subset(mlst_count_df , select = c(wgs_id, mlst_count))
mlst_summary <- mlst_count_summary %>%
group_by(wgs_id) %>%
mutate(mlst_count = paste0(mlst_count, collapse = "")) %>%
distinct()
}
}
mlst_summary <- data.frame(Species=character(),
MLST=character(),
stringsAsFactors=FALSE)
for(i in mlst_df_list) {
if (length(mlst_df_list) >1){
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
#add new data to exisiting dataframe
mlst_summary[nrow(mlst_summary) + 1,] = c(species, paste0(mlst_count_df$mlst_count, collapse=","))
}else{
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(wgs_id,MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
mlst_count_summary  <- subset(mlst_count_df , select = c(wgs_id, mlst_count))
mlst_summary <- mlst_count_summary %>%
group_by(wgs_id) %>%
mutate(mlst_count = paste0(mlst_count, collapse = "")) %>%
distinct()
}
}
#Print table
mlst_summary_table <- kable(mlst_summary,align = "l", row.names = FALSE) %>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
print(mlst_summary_table)
View(mlst_count_summary)
mlst_summary <- data.frame(Species=character(),
MLST=character(),
stringsAsFactors=FALSE)
for(i in mlst_df_list) {
if (length(mlst_df_list) >1){
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
#add new data to exisiting dataframe
mlst_summary[nrow(mlst_summary) + 1,] = c(species, paste0(mlst_count_df$mlst_count, collapse=", "))
}else{
df <- get(i)
#get unique species value
species <- unique(df$wgs_id)
#remove from list all value with "quasi"
species <- species[!species %in% grep("quasi", species, value = T)]
#Summarize and count MLST results
mlst_count_df <- df %>% group_by(wgs_id,MLST) %>% summarise(count = sum(!is.na(MLST)))
mlst_count_df$mlst_count <- paste0(mlst_count_df$MLST, " (n= ", mlst_count_df$count, " )")
#Remove empty MLST result
#mlst_count_df  <- subset(mlst_count_df , mlst_count_df $MLST !='-')
mlst_count_summary  <- subset(mlst_count_df , select = c(wgs_id, mlst_count))
mlst_summary <- mlst_count_summary %>%
group_by(wgs_id) %>%
mutate(mlst_count = paste0(mlst_count, collapse = ", ")) %>%
distinct()
}
}
#Print table
mlst_summary_table <- kable(mlst_summary,align = "l", row.names = FALSE) %>%
kable_styling(position = "left") %>%
row_spec(0, background = "#D4D4D4",bold = TRUE) %>%
print(mlst_summary_table)
library(tidyverse)
library(knitr)
library(readxl)
library(dplyr)
library(kableExtra)
library(RColorBrewer)
library(scales)
library(readr)
library(DBI)
library(svDialogs)
library(xlsx)
library(writexl)
setwd("D:/ALLYSA FILE/2024/DMU Projects/wgs-qc")
#Get the WGS QC File
get_batchname <- dlgInput("Enter batch number:", Sys.info()[" "])$res
get_samplesheet <- dlgInput("Enter sample sheet file name:", Sys.info()[" "])$res
get_file <- paste("data_files/qualifyr_report.tsv")
wgs_df <- read.delim(file= get_file)
wgs_df$sample_name <- gsub("-", "_", wgs_df$sample_name, fixed=TRUE)
#get MLST and AMR Genes tsv files
get_mlst <- paste("data_files/mlst.tsv")
mlst_df <- read.delim(file= get_mlst)
get_genes <- paste("data_files/amrfinderplus-genes.tsv")
AMR_df <- read.delim(file= get_genes)
# Define a function to remove the second underscore if the string doesn't contain the specific text
remove_second_underscore <- function(x) {
if (!grepl('UTP', x)) {
x <- gsub("^(.*?_.*?)_(.*)", "\\1\\2", x)
}
return(x)
}
# Apply the function to the column of strings
wgs_df <- wgs_df %>%
mutate(sample_name = sapply(sample_name, remove_second_underscore))
#Check if STC sample is present in the id list
stc_sample <- grep("STC", wgs_df[['sample_name']], value = TRUE)
stc_sample_count <- length(stc_sample)
if (stc_sample_count !=0){
wgs_df$sample_name <- gsub("STC", "STC_", wgs_df$sample_name, fixed=TRUE)
}
wgs_df[wgs_df == 'WARN'] <- 'WARNING'
wgs_df[wgs_df == 'FAIL'] <- 'FAILURE'
#Rename WGS QC dataframe column
wgs_df <- wgs_df %>%
rename(
sample_id = sample_name,
wgs_id = bactinspector.species.metric_value,
check_result = bactinspector.result.check_result,
dups_result = fastqc.1.Sequence.Duplication.Levels.check_result,
contamination_value = confindr.percentage_contamination.metric_value,
contamination_result =confindr.percentage_contamination.check_result,
no_of_contigs_value = quast...contigs.....0.bp..metric_value,
no_of_contigs_result = quast...contigs.....0.bp..check_result,
gc_percent_value = quast.GC.....metric_value,
gc_percent_result = quast.GC.....check_result,
n50_value = quast.N50.metric_value,
n50_result = quast.N50.check_result,
total_length_value = quast.Total.length.....1000.bp..metric_value,
total_length_result = quast.Total.length.....1000.bp..check_result
)
write.xlsx(wgs_df, file = (paste("wgs_df_",get_batchname, '.xlsx', sep='')), row.names=FALSE)
# taking input with showing the message
#get_file <- dlgInput("Enter a text filename", Sys.info()[" "])$res
id_list <- na.omit(wgs_df[['sample_id']])
id_list <- gsub("\\_", "_", id_list)
# Connect to db
con <- dbConnect(RPostgres::Postgres(),dbname = 'WGS_DB',
host = '10.10.24.163', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = 'secret123')
# Escape single quotes in the strings
id_list <- gsub("'", "''", id_list)
# Convert the list of IDs to a comma-separated string enclosed in single quotes
id_string <- paste0("'", paste(id_list, collapse = "','"), "'")
query <- paste("SELECT * from wgs_app_referreddb
WHERE wgs_app_referreddb.sample_name IN (", id_string, ")", sep="")
df <- dbSendQuery(con, query)
result <- dbFetch(df)
result <- result %>% mutate_all(as.character)
result <- result %>% mutate_all(~as.character(ifelse(. == "nan", "", .)))
#result <- read_xlsx("data_files/result.xlsx")
#Check if UTP sample is present in the id list
utp_sample <- grep("UTP", wgs_df[['sample_id']], value = TRUE)
utp_sample_count <- length(utp_sample)
if(utp_sample_count !=0){
sample_name = utp_sample
arsrl_org = "Escherichia coli"
arsrl_result_df <- result %>%
add_row(sample_name = sample_name, arsrl_org=arsrl_org)
arsrl_result_df <- subset(arsrl_result_df , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}else{
arsrl_result_df <- subset(result , select = c(sample_name,arsrl_org))
colnames(arsrl_result_df) <- c('sample_id','arsrl_org')
}
#wgs_df <- read_xlsx("wgs_df_2024-05-03.xlsx")
if(nrow(wgs_df) != 0){
rmarkdown::render("wgs_qc_report_ver7.Rmd",
output_file = paste("qualifyr_report_",get_batchname, '.pdf', sep='')
)
}else{
cat("No file found")
}
#(wgs_df, file="wgs_qc_data.csv")
#write.csv(result, file="result_wgs_qc_data.csv")
